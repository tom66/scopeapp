   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB74:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  47:armwave.c     ****     int i;
  48:armwave.c     ****     float gamma = 0.90f;
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  52:armwave.c     ****     }
  53:armwave.c     **** }
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  57:armwave.c     ****  * pre-computed.
  58:armwave.c     ****  *
  59:armwave.c     ****  * @param    slice_y        Slice to render at
  60:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  61:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  62:armwave.c     ****  */
  63:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  64:armwave.c     **** {
  65:armwave.c     ****     int yy, ys, w, scale_value;
  66:armwave.c     ****     uint32_t value, word;
  67:armwave.c     ****     uint8_t *wave_base;
  68:armwave.c     ****     uint8_t *write_buffer_base;
  69:armwave.c     ****     uint8_t *write_buffer;
  70:armwave.c     ****     
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  72:armwave.c     **** 
  73:armwave.c     ****     // roll through each waveform
  74:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
  75:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  76:armwave.c     **** 
  77:armwave.c     ****         // roll through y and render the slice into the out buffer
  78:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  79:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  80:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  81:armwave.c     **** 
  82:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  83:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  84:armwave.c     ****                 scale_value = (word & 0xff);
  85:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
  86:armwave.c     ****                 *(write_buffer + scale_value) += 1;
  87:armwave.c     ****                 word >>= 8;
  88:armwave.c     ****             }
  89:armwave.c     ****         }
  90:armwave.c     ****     }
  91:armwave.c     **** }
  92:armwave.c     **** 
  93:armwave.c     **** void armwave_init()
  94:armwave.c     **** {
  95:armwave.c     ****     g_armwave_state.flags = 0;
  96:armwave.c     **** }
  97:armwave.c     **** 
  98:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 98 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  99:armwave.c     **** {
 100:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 100 5 view .LVU1
 101:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 101 5 view .LVU2
 102:armwave.c     **** 
 103:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 103 5 view .LVU3
 104:armwave.c     **** 
 105:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 106:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 106 5 view .LVU4
  93              	@ armwave.c:98: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_
  98:armwave.c     **** {
  94              		.loc 1 98 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:109:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 107:armwave.c     **** 
 108:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 109:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 109 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp143, target_height,
 104              	@ armwave.c:106:     g_armwave_state.wave_buffer = wave_buffer;
 106:armwave.c     **** 
 105              		.loc 1 106 33 view .LVU7
 106 0008 A0419FE5 		ldr	r4, .L21+8	@ tmp213,
 107 000c A0319FE5 		ldr	r3, .L21+12	@ tmp142,
 108              	@ armwave.c:109:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 109 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp215, tmp143,
 111              	@ armwave.c:98: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_
  98:armwave.c     **** {
 112              		.loc 1 98 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:98: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_
  98:armwave.c     **** {
 118              		.loc 1 98 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:106:     g_armwave_state.wave_buffer = wave_buffer;
 106:armwave.c     **** 
 121              		.loc 1 106 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp142, g_armwave_state.wave_buffer
 123              		.loc 1 109 5 is_stmt 1 view .LVU12
 124 0020 4600000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp145, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp216, tmp145,
 127 002c 4E00001A 		bne	.L17		@,
 110:armwave.c     **** 
 111:armwave.c     ****     if(target_height == 256) {
 112:armwave.c     ****         g_armwave_state.row_shift = 8;
 113:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 114:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 114 12 view .LVU13
 115:armwave.c     ****         g_armwave_state.row_shift = 9;
 116:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 117:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 117 12 view .LVU14
 130              	@ armwave.c:117:     } else if(target_height == 1024) {
 131              		.loc 1 117 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4800000A 		beq	.L18		@,
 118:armwave.c     ****         g_armwave_state.row_shift = 10;
 119:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 120:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 120 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:120:     } else if(target_height == 2048) {
 136              		.loc 1 120 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 121:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 121 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:121:         g_armwave_state.row_shift = 11;
 140              		.loc 1 121 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp165,
 142 0040 70319F05 		ldreq	r3, .L21+16	@ tmp163,
 143 0044 F424C401 		strdeq	r2, [r4, #68]	@, tmp213,
 122:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 122 9 is_stmt 1 view .LVU20
 145              	.L5:
 123:armwave.c     ****     } 
 124:armwave.c     **** 
 125:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 126:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 126 5 view .LVU21
 147              	@ armwave.c:130:     g_armwave_state.size = target_height * target_width;
 127:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 128:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 129:armwave.c     ****     g_armwave_state.waves = waves;
 130:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 148              		.loc 1 130 42 is_stmt 0 view .LVU22
 149 0048 950102E0 		mul	r2, r5, r1	@ tmp174, target_width, target_height
 150              	@ armwave.c:132:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 131:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 132:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 151              		.loc 1 132 68 view .LVU23
 152 004c 0534A0E1 		lsl	r3, r5, #8	@ _11, target_width,
 153              	@ armwave.c:127:     g_armwave_state.vscale = target_height / 256;
 127:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 154              		.loc 1 127 44 view .LVU24
 155 0050 2104A0E1 		lsr	r0, r1, #8	@ tmp168, target_height,
 156              	.LVL1:
 157              	@ armwave.c:126:     g_armwave_state.xstride = target_height;
 126:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 158              		.loc 1 126 29 view .LVU25
 159 0054 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 127:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 160              		.loc 1 127 5 is_stmt 1 view .LVU26
 161              	@ armwave.c:134:     g_armwave_state.target_height = target_height;
 133:armwave.c     ****     g_armwave_state.target_width = target_width;
 134:armwave.c     ****     g_armwave_state.target_height = target_height;
 162              		.loc 1 134 35 is_stmt 0 view .LVU27
 163 0058 401084E5 		str	r1, [r4, #64]	@ target_height, g_armwave_state.target_height
 164              	@ armwave.c:130:     g_armwave_state.size = target_height * target_width;
 130:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 165              		.loc 1 130 26 view .LVU28
 166 005c 382084E5 		str	r2, [r4, #56]	@ tmp174, g_armwave_state.size
 167              	@ armwave.c:136:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 135:armwave.c     **** 
 136:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 168              		.loc 1 136 5 view .LVU29
 169 0060 0310A0E1 		mov	r1, r3	@, _11
 170              	.LVL2:
 171              	@ armwave.c:128:     g_armwave_state.wave_stride = wave_stride;
 128:armwave.c     ****     g_armwave_state.waves = waves;
 172              		.loc 1 128 33 view .LVU30
 173 0064 022BA0E3 		mov	r2, #2048	@ tmp170,
 174              	@ armwave.c:127:     g_armwave_state.vscale = target_height / 256;
 127:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 175              		.loc 1 127 28 view .LVU31
 176 0068 1C0084E5 		str	r0, [r4, #28]	@ tmp168, g_armwave_state.vscale
 128:armwave.c     ****     g_armwave_state.waves = waves;
 177              		.loc 1 128 5 is_stmt 1 view .LVU32
 178              	@ armwave.c:129:     g_armwave_state.waves = waves;
 129:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 179              		.loc 1 129 27 is_stmt 0 view .LVU33
 180 006c 4060A0E3 		mov	r6, #64	@ tmp172,
 181              	@ armwave.c:132:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 132:armwave.c     ****     g_armwave_state.target_width = target_width;
 182              		.loc 1 132 34 view .LVU34
 183 0070 343084E5 		str	r3, [r4, #52]	@ _11, g_armwave_state.ch_buff_size
 184              	@ armwave.c:136:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 185              		.loc 1 136 5 view .LVU35
 186 0074 40019FE5 		ldr	r0, .L21+20	@,
 187              	@ armwave.c:131:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 131:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 188              		.loc 1 131 37 view .LVU36
 189 0078 013CA0E3 		mov	r3, #256	@ tmp176,
 190              	@ armwave.c:133:     g_armwave_state.target_width = target_width;
 133:armwave.c     ****     g_armwave_state.target_height = target_height;
 191              		.loc 1 133 34 view .LVU37
 192 007c 3C5084E5 		str	r5, [r4, #60]	@ target_width, g_armwave_state.target_width
 193              	@ armwave.c:128:     g_armwave_state.wave_stride = wave_stride;
 128:armwave.c     ****     g_armwave_state.waves = waves;
 194              		.loc 1 128 33 view .LVU38
 195 0080 202084E5 		str	r2, [r4, #32]	@ tmp170, g_armwave_state.wave_stride
 129:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 196              		.loc 1 129 5 is_stmt 1 view .LVU39
 197              	@ armwave.c:129:     g_armwave_state.waves = waves;
 129:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 198              		.loc 1 129 27 is_stmt 0 view .LVU40
 199 0084 246084E5 		str	r6, [r4, #36]	@ tmp172, g_armwave_state.waves
 130:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 200              		.loc 1 130 5 is_stmt 1 view .LVU41
 131:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 201              		.loc 1 131 5 view .LVU42
 202              	@ armwave.c:131:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 131:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 203              		.loc 1 131 37 is_stmt 0 view .LVU43
 204 0088 283084E5 		str	r3, [r4, #40]	@ tmp176, g_armwave_state.bitdepth_height
 132:armwave.c     ****     g_armwave_state.target_width = target_width;
 205              		.loc 1 132 5 is_stmt 1 view .LVU44
 133:armwave.c     ****     g_armwave_state.target_height = target_height;
 206              		.loc 1 133 5 view .LVU45
 134:armwave.c     **** 
 207              		.loc 1 134 5 view .LVU46
 208              		.loc 1 136 5 view .LVU47
 209 008c FEFFFFEB 		bl	printf		@
 210              	.LVL3:
 137:armwave.c     **** 
 138:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 139:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 140:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 141:armwave.c     ****     g_armwave_state.slice_height = 64;  
 211              		.loc 1 141 5 view .LVU48
 212              	@ armwave.c:143:     if(g_armwave_state.ch1_buffer != NULL)
 142:armwave.c     **** 
 143:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 213              		.loc 1 143 23 is_stmt 0 view .LVU49
 214 0090 040094E5 		ldr	r0, [r4, #4]	@ _12, g_armwave_state.ch1_buffer
 215              	@ armwave.c:141:     g_armwave_state.slice_height = 64;  
 141:armwave.c     **** 
 216              		.loc 1 141 34 view .LVU50
 217 0094 2C6084E5 		str	r6, [r4, #44]	@ tmp172, g_armwave_state.slice_height
 218              		.loc 1 143 5 is_stmt 1 view .LVU51
 219              	@ armwave.c:143:     if(g_armwave_state.ch1_buffer != NULL)
 220              		.loc 1 143 7 is_stmt 0 view .LVU52
 221 0098 000050E3 		cmp	r0, #0	@ _12,
 222 009c 0000000A 		beq	.L7		@,
 144:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 223              		.loc 1 144 9 is_stmt 1 view .LVU53
 224 00a0 FEFFFFEB 		bl	free		@
 225              	.LVL4:
 226              	.L7:
 145:armwave.c     **** 
 146:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 227              		.loc 1 146 5 view .LVU54
 228              	@ armwave.c:146:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 229              		.loc 1 146 34 is_stmt 0 view .LVU55
 230 00a4 0110A0E3 		mov	r1, #1	@,
 231 00a8 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 232 00ac FEFFFFEB 		bl	calloc		@
 233              	.LVL5:
 234              	@ armwave.c:148:     assert(g_armwave_state.ch1_buffer != NULL);
 147:armwave.c     **** 
 148:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 235              		.loc 1 148 5 view .LVU56
 236 00b0 000050E3 		cmp	r0, #0	@ tmp186,
 237              	@ armwave.c:146:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 146:armwave.c     **** 
 238              		.loc 1 146 32 view .LVU57
 239 00b4 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 240              		.loc 1 148 5 is_stmt 1 view .LVU58
 241 00b8 3000000A 		beq	.L19		@,
 149:armwave.c     **** 
 150:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 151:armwave.c     ****     length = end_point - start_point;
 242              		.loc 1 151 5 view .LVU59
 243              	.LVL6:
 152:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 244              		.loc 1 152 5 view .LVU60
 245              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 246              		.loc 1 152 34 is_stmt 0 view .LVU61
 247 00bc 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 248              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 249              		.loc 1 152 22 view .LVU62
 250 00c0 386ADFED 		vldr.32	s13, .L21	@ tmp192,
 251              	@ armwave.c:154:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 153:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 154:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 252              		.loc 1 154 40 view .LVU63
 253 00c4 010AA0E3 		mov	r0, #4096	@,
 254              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 152:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 255              		.loc 1 152 34 view .LVU64
 256 00c8 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp191, target_width
 257              	@ armwave.c:153:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 153:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 258              		.loc 1 153 60 view .LVU65
 259 00cc 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp218, g_armwave_state.slice_height
 260 00d0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp195, tmp218
 261              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 152:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 262              		.loc 1 152 22 view .LVU66
 263 00d4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp192, tmp191
 264              	.LVL7:
 153:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 265              		.loc 1 153 5 is_stmt 1 view .LVU67
 266              	@ armwave.c:153:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 153:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 267              		.loc 1 153 60 is_stmt 0 view .LVU68
 268 00d8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp197, tmp195, points_per_pixel
 269              	@ armwave.c:153:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 153:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 270              		.loc 1 153 41 view .LVU69
 271 00dc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp198, tmp197
 272 00e0 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp198, g_armwave_state.slice_record_height
 273              		.loc 1 154 5 is_stmt 1 view .LVU70
 274              	@ armwave.c:154:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 275              		.loc 1 154 40 is_stmt 0 view .LVU71
 276 00e4 FEFFFFEB 		bl	malloc		@
 277              	.LVL8:
 278              	@ armwave.c:156:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 155:armwave.c     **** 
 156:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 279              		.loc 1 156 5 view .LVU72
 280 00e8 000050E3 		cmp	r0, #0	@ tmp199,
 281              	@ armwave.c:154:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 154:armwave.c     **** 
 282              		.loc 1 154 38 view .LVU73
 283 00ec 680084E5 		str	r0, [r4, #104]	@ tmp199, g_armwave_state.xcoord_to_xpixel
 284              		.loc 1 156 5 is_stmt 1 view .LVU74
 285 00f0 2700000A 		beq	.L20		@,
 286              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 157:armwave.c     **** 
 158:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 159:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 287              		.loc 1 159 54 is_stmt 0 view .LVU75
 288 00f4 2C7ADFED 		vldr.32	s15, .L21+4	@ tmp204,
 289 00f8 020040E2 		sub	r0, r0, #2	@ ivtmp.30, tmp199,
 290              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 291              		.loc 1 158 12 view .LVU76
 292 00fc 0030A0E3 		mov	r3, #0	@ xx,
 293              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 294              		.loc 1 159 54 view .LVU77
 295 0100 887A87EE 		vdiv.f32	s14, s15, s16	@ _25, tmp204, points_per_pixel
 296              	.L10:
 297              	.LVL9:
 298              		.loc 1 159 9 is_stmt 1 view .LVU78
 299              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 300              		.loc 1 159 74 is_stmt 0 view .LVU79
 301 0104 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 302              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 303              		.loc 1 158 32 view .LVU80
 304 0108 013083E2 		add	r3, r3, #1	@ xx, xx,
 305              	.LVL10:
 306              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 307              		.loc 1 158 5 view .LVU81
 308 010c 020B53E3 		cmp	r3, #2048	@ xx,
 309              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 310              		.loc 1 159 74 view .LVU82
 311 0110 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp205, xx
 312 0114 877A67EE 		vmul.f32	s15, s15, s14	@ tmp206, tmp205, _25
 313              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 314              		.loc 1 159 46 view .LVU83
 315 0118 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp207, tmp206
 316 011c 902A17EE 		vmov	r2, s15	@ int	@ tmp207, tmp207
 317 0120 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp207, MEM[base: _6, offset: 0B]
 318              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 319              		.loc 1 158 5 view .LVU84
 320 0124 F6FFFF1A 		bne	.L10		@,
 160:armwave.c     **** 
 161:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 162:armwave.c     ****     }
 163:armwave.c     **** 
 164:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 321              		.loc 1 164 5 is_stmt 1 view .LVU85
 322              	@ armwave.c:164:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 323              		.loc 1 164 34 is_stmt 0 view .LVU86
 324 0128 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 325 012c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 326 0130 FEFFFFEB 		bl	malloc		@
 327              	.LVL11:
 328              	@ armwave.c:165: }
 165:armwave.c     **** }
 329              		.loc 1 165 1 view .LVU87
 330 0134 028BBDEC 		vldm	sp!, {d8}	@
 331              		.cfi_remember_state
 332              		.cfi_restore 80
 333              		.cfi_restore 81
 334              		.cfi_def_cfa_offset 16
 335              	.LVL12:
 336              	@ armwave.c:164:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 164:armwave.c     **** }
 337              		.loc 1 164 32 view .LVU88
 338 0138 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 339              	@ armwave.c:165: }
 340              		.loc 1 165 1 view .LVU89
 341 013c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 342              	.LVL13:
 343              	.L2:
 344              		.cfi_restore_state
 111:armwave.c     ****         g_armwave_state.row_shift = 8;
 345              		.loc 1 111 5 is_stmt 1 view .LVU90
 346              	@ armwave.c:111:     if(target_height == 256) {
 111:armwave.c     ****         g_armwave_state.row_shift = 8;
 347              		.loc 1 111 7 is_stmt 0 view .LVU91
 348 0140 010C51E3 		cmp	r1, #256	@ target_height,
 112:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 349              		.loc 1 112 9 is_stmt 1 view .LVU92
 350              	@ armwave.c:113:         g_armwave_state.row_mask = 0x0ff;
 113:armwave.c     ****     } else if(target_height == 512) {
 351              		.loc 1 113 34 is_stmt 0 view .LVU93
 352 0144 0820A003 		moveq	r2, #8	@ tmp151,
 353              	@ armwave.c:115:         g_armwave_state.row_shift = 9;
 115:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 354              		.loc 1 115 35 view .LVU94
 355 0148 70309F15 		ldrne	r3, .L21+24	@ tmp155,
 356              	@ armwave.c:113:         g_armwave_state.row_mask = 0x0ff;
 113:armwave.c     ****     } else if(target_height == 512) {
 357              		.loc 1 113 34 view .LVU95
 358 014c FF30A003 		moveq	r3, #255	@ tmp153,
 114:armwave.c     ****         g_armwave_state.row_shift = 9;
 359              		.loc 1 114 12 is_stmt 1 view .LVU96
 115:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 360              		.loc 1 115 9 view .LVU97
 361              	@ armwave.c:115:         g_armwave_state.row_shift = 9;
 115:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 362              		.loc 1 115 35 is_stmt 0 view .LVU98
 363 0150 0920A013 		movne	r2, #9	@ tmp157,
 364 0154 F424C4E1 		strd	r2, [r4, #68]	@, tmp213,
 116:armwave.c     ****     } else if(target_height == 1024) {
 365              		.loc 1 116 9 is_stmt 1 view .LVU99
 366 0158 BAFFFFEA 		b	.L5		@
 367              	.L18:
 118:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 368              		.loc 1 118 9 view .LVU100
 369              	@ armwave.c:118:         g_armwave_state.row_shift = 10;
 118:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 370              		.loc 1 118 35 is_stmt 0 view .LVU101
 371 015c 60309FE5 		ldr	r3, .L21+28	@ tmp159,
 372 0160 0A20A0E3 		mov	r2, #10	@ tmp161,
 373 0164 F424C4E1 		strd	r2, [r4, #68]	@, tmp213,
 119:armwave.c     ****     } else if(target_height == 2048) {
 374              		.loc 1 119 9 is_stmt 1 view .LVU102
 375 0168 B6FFFFEA 		b	.L5		@
 376              	.L17:
 109:armwave.c     **** 
 377              		.loc 1 109 5 view .LVU103
 378 016c 54309FE5 		ldr	r3, .L21+32	@,
 379 0170 6D20A0E3 		mov	r2, #109	@,
 380 0174 50109FE5 		ldr	r1, .L21+36	@,
 381              	.LVL14:
 109:armwave.c     **** 
 382              		.loc 1 109 5 is_stmt 0 view .LVU104
 383 0178 50009FE5 		ldr	r0, .L21+40	@,
 384              	.LVL15:
 109:armwave.c     **** 
 385              		.loc 1 109 5 view .LVU105
 386 017c FEFFFFEB 		bl	__assert_fail		@
 387              	.LVL16:
 388              	.L19:
 148:armwave.c     **** 
 389              		.loc 1 148 5 is_stmt 1 view .LVU106
 390 0180 40309FE5 		ldr	r3, .L21+32	@,
 391 0184 9420A0E3 		mov	r2, #148	@,
 392 0188 3C109FE5 		ldr	r1, .L21+36	@,
 393 018c 40009FE5 		ldr	r0, .L21+44	@,
 394 0190 FEFFFFEB 		bl	__assert_fail		@
 395              	.LVL17:
 396              	.L20:
 156:armwave.c     **** 
 397              		.loc 1 156 5 view .LVU107
 398 0194 2C309FE5 		ldr	r3, .L21+32	@,
 399 0198 9C20A0E3 		mov	r2, #156	@,
 400 019c 28109FE5 		ldr	r1, .L21+36	@,
 401 01a0 30009FE5 		ldr	r0, .L21+48	@,
 402 01a4 FEFFFFEB 		bl	__assert_fail		@
 403              	.LVL18:
 404              	.L22:
 405              		.align	2
 406              	.L21:
 407 01a8 00000045 		.word	1157627904
 408 01ac 0000803F 		.word	1065353216
 409 01b0 00000000 		.word	g_armwave_state
 410 01b4 00000000 		.word	test_wave_buffer
 411 01b8 FF070000 		.word	2047
 412 01bc 6C000000 		.word	.LC2
 413 01c0 FF010000 		.word	511
 414 01c4 FF030000 		.word	1023
 415 01c8 00000000 		.word	.LANCHOR0
 416 01cc 00000000 		.word	.LC0
 417 01d0 0C000000 		.word	.LC1
 418 01d4 80000000 		.word	.LC3
 419 01d8 A4000000 		.word	.LC4
 420              		.cfi_endproc
 421              	.LFE74:
 423              		.align	2
 424              		.global	test_create_gamma
 425              		.syntax unified
 426              		.arm
 427              		.fpu vfp
 429              	test_create_gamma:
 430              	.LFB57:
  46:armwave.c     ****     int i;
 431              		.loc 1 46 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     float gamma = 0.90f;
 435              		.loc 1 47 5 view .LVU109
  48:armwave.c     **** 
 436              		.loc 1 48 5 view .LVU110
 437              	.LVL19:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 438              		.loc 1 50 5 view .LVU111
 439              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
 440              		.loc 1 46 1 is_stmt 0 view .LVU112
 441 01dc 70402DE9 		push	{r4, r5, r6, lr}	@
 442              		.cfi_def_cfa_offset 16
 443              		.cfi_offset 4, -16
 444              		.cfi_offset 5, -12
 445              		.cfi_offset 6, -8
 446              		.cfi_offset 14, -4
 447 01e0 068B2DED 		vpush.64	{d8, d9, d10}	@
 448              		.cfi_def_cfa_offset 40
 449              		.cfi_offset 80, -40
 450              		.cfi_offset 81, -36
 451              		.cfi_offset 82, -32
 452              		.cfi_offset 83, -28
 453              		.cfi_offset 84, -24
 454              		.cfi_offset 85, -20
 455 01e4 68409FE5 		ldr	r4, .L27+20	@ ivtmp.39,
 456              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 457              		.loc 1 51 32 view .LVU113
 458 01e8 18AA9FED 		vldr.32	s20, .L27+16	@ tmp128,
 459              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 460              		.loc 1 51 26 view .LVU114
 461 01ec 139B9FED 		vldr.64	d9, .L27	@ tmp135,
 462              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 463              		.loc 1 51 49 view .LVU115
 464 01f0 148B9FED 		vldr.64	d8, .L27+8	@ tmp131,
 465 01f4 015084E2 		add	r5, r4, #1	@ _25, ivtmp.39,
 466 01f8 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.39,
 467 01fc 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 468              	.LVL20:
 469              	.L24:
  51:armwave.c     ****     }
 470              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU116
 471              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 472              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU117
 473 0200 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.39
 474              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 475              		.loc 1 51 26 discriminator 3 view .LVU118
 476 0204 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 477              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 478              		.loc 1 51 32 discriminator 3 view .LVU119
 479 0208 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 480 020c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 481 0210 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 482              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 483              		.loc 1 51 26 discriminator 3 view .LVU120
 484 0214 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 485 0218 FEFFFFEB 		bl	pow		@
 486              	.LVL21:
 487              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 488              		.loc 1 51 49 discriminator 3 view .LVU121
 489 021c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 490              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 491              		.loc 1 51 24 discriminator 3 view .LVU122
 492 0220 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 493 0224 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 494 0228 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 495              	.LVL22:
 496              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 497              		.loc 1 50 5 discriminator 3 view .LVU123
 498 022c 060054E1 		cmp	r4, r6	@ ivtmp.39, _26
 499 0230 F2FFFF1A 		bne	.L24		@,
 500              	@ armwave.c:53: }
  53:armwave.c     **** 
 501              		.loc 1 53 1 view .LVU124
 502 0234 068BBDEC 		vldm	sp!, {d8-d10}	@,
 503              		.cfi_restore 84
 504              		.cfi_restore 85
 505              		.cfi_restore 82
 506              		.cfi_restore 83
 507              		.cfi_restore 80
 508              		.cfi_restore 81
 509              		.cfi_def_cfa_offset 16
 510 0238 7080BDE8 		pop	{r4, r5, r6, pc}	@
 511              	.LVL23:
 512              	.L28:
  53:armwave.c     **** 
 513              		.loc 1 53 1 view .LVU125
 514 023c 0000A0E1 		.align	3
 515              	.L27:
 516 0240 000000C0 		.word	-1073741824
 517 0244 CCCCEC3F 		.word	1072483532
 518 0248 00000000 		.word	0
 519 024c 00E06F40 		.word	1081073664
 520 0250 00007F43 		.word	1132396544
 521 0254 FFFFFFFF 		.word	gamma_table-1
 522              		.cfi_endproc
 523              	.LFE57:
 525              		.align	2
 526              		.global	render_nonaa_to_buffer_1ch_slice
 527              		.syntax unified
 528              		.arm
 529              		.fpu vfp
 531              	render_nonaa_to_buffer_1ch_slice:
 532              	.LVL24:
 533              	.LFB58:
  64:armwave.c     ****     int yy, ys, w, scale_value;
 534              		.loc 1 64 1 is_stmt 1 view -0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
  65:armwave.c     ****     uint32_t value, word;
 538              		.loc 1 65 5 view .LVU127
  66:armwave.c     ****     uint8_t *wave_base;
 539              		.loc 1 66 5 view .LVU128
  67:armwave.c     ****     uint8_t *write_buffer_base;
 540              		.loc 1 67 5 view .LVU129
  68:armwave.c     ****     uint8_t *write_buffer;
 541              		.loc 1 68 5 view .LVU130
  69:armwave.c     ****     
 542              		.loc 1 69 5 view .LVU131
  71:armwave.c     **** 
 543              		.loc 1 71 5 view .LVU132
 544              	@ armwave.c:64: {
  64:armwave.c     ****     int yy, ys, w, scale_value;
 545              		.loc 1 64 1 is_stmt 0 view .LVU133
 546 0258 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 547              		.cfi_def_cfa_offset 36
 548              		.cfi_offset 4, -36
 549              		.cfi_offset 5, -32
 550              		.cfi_offset 6, -28
 551              		.cfi_offset 7, -24
 552              		.cfi_offset 8, -20
 553              		.cfi_offset 9, -16
 554              		.cfi_offset 10, -12
 555              		.cfi_offset 11, -8
 556              		.cfi_offset 14, -4
 557              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 558              		.loc 1 71 40 view .LVU134
 559 025c D0409FE5 		ldr	r4, .L41	@ tmp242,
 560              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 561              		.loc 1 74 5 view .LVU135
 562 0260 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 563              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 564              		.loc 1 71 63 view .LVU136
 565 0264 285094E5 		ldr	r5, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 566              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 567              		.loc 1 74 5 view .LVU137
 568 0268 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 569              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 570              		.loc 1 71 40 view .LVU138
 571 026c 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 572              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 573              		.loc 1 71 63 view .LVU139
 574 0270 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 575              	.LVL25:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 576              		.loc 1 74 5 is_stmt 1 view .LVU140
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 577              		.loc 1 74 5 is_stmt 0 view .LVU141
 578 0274 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 579 0278 000051E3 		cmp	r1, #0	@ height,
 580 027c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 581 0280 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 582              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 583              		.loc 1 74 11 view .LVU142
 584 0284 0070A0E3 		mov	r7, #0	@ w,
 585              	.LVL26:
 586              	.L33:
  75:armwave.c     **** 
 587              		.loc 1 75 9 is_stmt 1 view .LVU143
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 588              		.loc 1 79 9 view .LVU144
 589              	@ armwave.c:75:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  75:armwave.c     **** 
 590              		.loc 1 75 64 is_stmt 0 view .LVU145
 591 0288 200094E5 		ldr	r0, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 592 028c 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 593              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 594              		.loc 1 79 16 view .LVU146
 595 0290 0020A0E3 		mov	r2, #0	@ yy,
 596 0294 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 597 0298 006086E0 		add	r6, r6, r0	@ ivtmp.45, g_armwave_state.wave_buffer, tmp193
 598              	.LVL27:
 599              	.L32:
  80:armwave.c     **** 
 600              		.loc 1 80 13 is_stmt 1 view .LVU147
 601              	@ armwave.c:80:             word = *(uint32_t*)(wave_base + yy);
  80:armwave.c     **** 
 602              		.loc 1 80 18 is_stmt 0 view .LVU148
 603 029c 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 604              	.LVL28:
  82:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 605              		.loc 1 82 13 is_stmt 1 view .LVU149
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 606              		.loc 1 84 17 view .LVU150
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 607              		.loc 1 85 17 view .LVU151
  86:armwave.c     ****                 word >>= 8;
 608              		.loc 1 86 17 view .LVU152
 609              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 610              		.loc 1 85 63 is_stmt 0 view .LVU153
 611 02a0 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 612 02a4 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 613              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 614              		.loc 1 86 47 view .LVU154
 615 02a8 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 616 02ac 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 617              	@ armwave.c:87:                 word >>= 8;
  87:armwave.c     ****             }
 618              		.loc 1 87 22 view .LVU155
 619 02b0 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 620 02b4 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 621              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 622              		.loc 1 86 47 view .LVU156
 623 02b8 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 624 02bc 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 625 02c0 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 626 02c4 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 627              	.LVL29:
  87:armwave.c     ****             }
 628              		.loc 1 87 17 is_stmt 1 view .LVU157
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 629              		.loc 1 84 17 view .LVU158
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 630              		.loc 1 85 17 view .LVU159
  86:armwave.c     ****                 word >>= 8;
 631              		.loc 1 86 17 view .LVU160
 632              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 633              		.loc 1 85 63 is_stmt 0 view .LVU161
 634 02c8 28E094E5 		ldr	lr, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 635              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 636              		.loc 1 86 47 view .LVU162
 637 02cc 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 638 02d0 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 639              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 640              		.loc 1 85 63 view .LVU163
 641 02d4 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 642 02d8 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 643              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 644              		.loc 1 86 47 view .LVU164
 645 02dc 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 646 02e0 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 647              	.LVL30:
 648              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 649              		.loc 1 79 37 view .LVU165
 650 02e4 042082E2 		add	r2, r2, #4	@ yy, yy,
 651              	.LVL31:
 652              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 653              		.loc 1 86 47 view .LVU166
 654 02e8 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 655 02ec 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 656              	.LVL32:
  87:armwave.c     ****             }
 657              		.loc 1 87 17 is_stmt 1 view .LVU167
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 658              		.loc 1 84 17 view .LVU168
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 659              		.loc 1 85 17 view .LVU169
  86:armwave.c     ****                 word >>= 8;
 660              		.loc 1 86 17 view .LVU170
 661              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 662              		.loc 1 85 63 is_stmt 0 view .LVU171
 663 02f0 28E094E5 		ldr	lr, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 664              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 665              		.loc 1 79 9 view .LVU172
 666 02f4 020051E1 		cmp	r1, r2	@ height, yy
 667              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 668              		.loc 1 86 47 view .LVU173
 669 02f8 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 670 02fc 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 671 0300 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 672 0304 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
  87:armwave.c     ****             }
 673              		.loc 1 87 17 is_stmt 1 view .LVU174
 674              	.LVL33:
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 675              		.loc 1 84 17 view .LVU175
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 676              		.loc 1 85 17 view .LVU176
  86:armwave.c     ****                 word >>= 8;
 677              		.loc 1 86 17 view .LVU177
 678              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 679              		.loc 1 85 63 is_stmt 0 view .LVU178
 680 0308 28C094E5 		ldr	ip, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 681              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 682              		.loc 1 86 47 view .LVU179
 683 030c 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 684 0310 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 685 0314 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 686 0318 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
  87:armwave.c     ****             }
 687              		.loc 1 87 17 is_stmt 1 view .LVU180
 688              	.LVL34:
 689              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 690              		.loc 1 79 9 is_stmt 0 view .LVU181
 691 031c DEFFFF8A 		bhi	.L32		@,
 692              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 693              		.loc 1 74 5 view .LVU182
 694 0320 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 695              	.LVL35:
 696              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 697              		.loc 1 74 44 view .LVU183
 698 0324 017087E2 		add	r7, r7, #1	@ w, w,
 699              	.LVL36:
 700              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 701              		.loc 1 74 5 view .LVU184
 702 0328 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 703 032c D5FFFF3A 		bcc	.L33		@,
 704 0330 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 705              	.L42:
 706              		.align	2
 707              	.L41:
 708 0334 00000000 		.word	g_armwave_state
 709              		.cfi_endproc
 710              	.LFE58:
 712              		.align	2
 713              		.global	armwave_init
 714              		.syntax unified
 715              		.arm
 716              		.fpu vfp
 718              	armwave_init:
 719              	.LFB59:
  94:armwave.c     ****     g_armwave_state.flags = 0;
 720              		.loc 1 94 1 is_stmt 1 view -0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724              		@ link register save eliminated.
  95:armwave.c     **** }
 725              		.loc 1 95 5 view .LVU186
 726              	@ armwave.c:95:     g_armwave_state.flags = 0;
  95:armwave.c     **** }
 727              		.loc 1 95 27 is_stmt 0 view .LVU187
 728 0338 08309FE5 		ldr	r3, .L44	@ tmp110,
 729 033c 0020A0E3 		mov	r2, #0	@ tmp111,
 730 0340 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 731              	@ armwave.c:96: }
  96:armwave.c     **** 
 732              		.loc 1 96 1 view .LVU188
 733 0344 1EFF2FE1 		bx	lr	@
 734              	.L45:
 735              		.align	2
 736              	.L44:
 737 0348 00000000 		.word	g_armwave_state
 738              		.cfi_endproc
 739              	.LFE59:
 741              		.align	2
 742              		.global	armwave_setup_render
 743              		.syntax unified
 744              		.arm
 745              		.fpu vfp
 747              	armwave_setup_render:
 748              	.LVL37:
 749              	.LFB60:
  99:armwave.c     ****     uint32_t length, xx;
 750              		.loc 1 99 1 is_stmt 1 view -0
 751              		.cfi_startproc
 752              		@ args = 16, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     float points_per_pixel;
 754              		.loc 1 100 5 view .LVU190
 101:armwave.c     **** 
 755              		.loc 1 101 5 view .LVU191
 103:armwave.c     **** 
 756              		.loc 1 103 5 view .LVU192
 757              	@ armwave.c:99: {
  99:armwave.c     ****     uint32_t length, xx;
 758              		.loc 1 99 1 is_stmt 0 view .LVU193
 759 034c F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 760              		.cfi_def_cfa_offset 24
 761              		.cfi_offset 4, -24
 762              		.cfi_offset 5, -20
 763              		.cfi_offset 6, -16
 764              		.cfi_offset 7, -12
 765              		.cfi_offset 8, -8
 766              		.cfi_offset 14, -4
 767              	@ armwave.c:103:     assert(start_point < end_point);
 103:armwave.c     **** 
 768              		.loc 1 103 5 view .LVU194
 769 0350 020051E1 		cmp	r1, r2	@ start_point, end_point
 770              	@ armwave.c:99: {
  99:armwave.c     ****     uint32_t length, xx;
 771              		.loc 1 99 1 view .LVU195
 772 0354 028B2DED 		vpush.64	{d8}	@
 773              		.cfi_def_cfa_offset 32
 774              		.cfi_offset 80, -32
 775              		.cfi_offset 81, -28
 776              	@ armwave.c:99: {
  99:armwave.c     ****     uint32_t length, xx;
 777              		.loc 1 99 1 view .LVU196
 778 0358 0170A0E1 		mov	r7, r1	@ start_point, start_point
 779 035c 0250A0E1 		mov	r5, r2	@ end_point, end_point
 780 0360 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 781              	.LVL38:
  99:armwave.c     ****     uint32_t length, xx;
 782              		.loc 1 99 1 view .LVU197
 783 0364 24609DE5 		ldr	r6, [sp, #36]	@ target_width, target_width
 784 0368 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 785              	.LVL39:
 786              	@ armwave.c:103:     assert(start_point < end_point);
 103:armwave.c     **** 
 787              		.loc 1 103 5 view .LVU198
 788 036c 6B00002A 		bcs	.L62		@,
 106:armwave.c     **** 
 789              		.loc 1 106 5 is_stmt 1 view .LVU199
 790              	@ armwave.c:106:     g_armwave_state.wave_buffer = wave_buffer;
 106:armwave.c     **** 
 791              		.loc 1 106 33 is_stmt 0 view .LVU200
 792 0370 C0419FE5 		ldr	r4, .L67+4	@ tmp223,
 793              	@ armwave.c:109:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109:armwave.c     **** 
 794              		.loc 1 109 5 view .LVU201
 795 0374 01CC42E2 		sub	ip, r2, #256	@ tmp154, target_height,
 796 0378 01CCDCE3 		bics	ip, ip, #256	@ tmp225, tmp154,
 797              	@ armwave.c:106:     g_armwave_state.wave_buffer = wave_buffer;
 106:armwave.c     **** 
 798              		.loc 1 106 33 view .LVU202
 799 037c 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 109:armwave.c     **** 
 800              		.loc 1 109 5 is_stmt 1 view .LVU203
 801 0380 4800000A 		beq	.L48		@,
 802              	@ armwave.c:109:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109:armwave.c     **** 
 803              		.loc 1 109 5 is_stmt 0 discriminator 1 view .LVU204
 804 0384 010B42E2 		sub	r0, r2, #1024	@ tmp156, target_height,
 805              	.LVL40:
 109:armwave.c     **** 
 806              		.loc 1 109 5 discriminator 1 view .LVU205
 807 0388 010BD0E3 		bics	r0, r0, #1024	@ tmp226, tmp156,
 808 038c 5400001A 		bne	.L63		@,
 111:armwave.c     ****         g_armwave_state.row_shift = 8;
 809              		.loc 1 111 5 is_stmt 1 view .LVU206
 117:armwave.c     ****         g_armwave_state.row_shift = 10;
 810              		.loc 1 117 12 view .LVU207
 811              	@ armwave.c:117:     } else if(target_height == 1024) {
 117:armwave.c     ****         g_armwave_state.row_shift = 10;
 812              		.loc 1 117 14 is_stmt 0 view .LVU208
 813 0390 010B52E3 		cmp	r2, #1024	@ target_height,
 814 0394 4D00000A 		beq	.L64		@,
 120:armwave.c     ****         g_armwave_state.row_shift = 11;
 815              		.loc 1 120 12 is_stmt 1 view .LVU209
 816              	@ armwave.c:120:     } else if(target_height == 2048) {
 120:armwave.c     ****         g_armwave_state.row_shift = 11;
 817              		.loc 1 120 14 is_stmt 0 view .LVU210
 818 0398 020B52E3 		cmp	r2, #2048	@ target_height,
 121:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 819              		.loc 1 121 9 is_stmt 1 view .LVU211
 820              	@ armwave.c:121:         g_armwave_state.row_shift = 11;
 121:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 821              		.loc 1 121 35 is_stmt 0 view .LVU212
 822 039c 0B00A003 		moveq	r0, #11	@ tmp174,
 823              	@ armwave.c:122:         g_armwave_state.row_mask = 0x7ff;
 122:armwave.c     ****     } 
 824              		.loc 1 122 34 view .LVU213
 825 03a0 94C19F05 		ldreq	ip, .L67+8	@ tmp176,
 826              	@ armwave.c:121:         g_armwave_state.row_shift = 11;
 121:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 827              		.loc 1 121 35 view .LVU214
 828 03a4 44008405 		streq	r0, [r4, #68]	@ tmp174, g_armwave_state.row_shift
 122:armwave.c     ****     } 
 829              		.loc 1 122 9 is_stmt 1 view .LVU215
 830              	@ armwave.c:122:         g_armwave_state.row_mask = 0x7ff;
 122:armwave.c     ****     } 
 831              		.loc 1 122 34 is_stmt 0 view .LVU216
 832 03a8 48C08405 		streq	ip, [r4, #72]	@ tmp176, g_armwave_state.row_mask
 833              	.L51:
 126:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 834              		.loc 1 126 5 is_stmt 1 view .LVU217
 835              	@ armwave.c:130:     g_armwave_state.size = target_height * target_width;
 130:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 836              		.loc 1 130 42 is_stmt 0 view .LVU218
 837 03ac 96020EE0 		mul	lr, r6, r2	@ tmp183, target_width, target_height
 838              	@ armwave.c:132:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 132:armwave.c     ****     g_armwave_state.target_width = target_width;
 839              		.loc 1 132 68 view .LVU219
 840 03b0 06C4A0E1 		lsl	ip, r6, #8	@ _9, target_width,
 841              	@ armwave.c:127:     g_armwave_state.vscale = target_height / 256;
 127:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 842              		.loc 1 127 44 view .LVU220
 843 03b4 2204A0E1 		lsr	r0, r2, #8	@ tmp179, target_height,
 844              	@ armwave.c:128:     g_armwave_state.wave_stride = wave_stride;
 128:armwave.c     ****     g_armwave_state.waves = waves;
 845              		.loc 1 128 33 view .LVU221
 846 03b8 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 847              	@ armwave.c:129:     g_armwave_state.waves = waves;
 129:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 848              		.loc 1 129 27 view .LVU222
 849 03bc 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 850              	@ armwave.c:127:     g_armwave_state.vscale = target_height / 256;
 127:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 851              		.loc 1 127 28 view .LVU223
 852 03c0 1C0084E5 		str	r0, [r4, #28]	@ tmp179, g_armwave_state.vscale
 853              	@ armwave.c:131:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 131:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 854              		.loc 1 131 37 view .LVU224
 855 03c4 013CA0E3 		mov	r3, #256	@ tmp185,
 856              	.LVL41:
 857              	@ armwave.c:136:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 136:armwave.c     **** 
 858              		.loc 1 136 5 view .LVU225
 859 03c8 0C10A0E1 		mov	r1, ip	@, _9
 860 03cc 6C019FE5 		ldr	r0, .L67+12	@,
 861              	@ armwave.c:131:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 131:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 862              		.loc 1 131 37 view .LVU226
 863 03d0 283084E5 		str	r3, [r4, #40]	@ tmp185, g_armwave_state.bitdepth_height
 864              	@ armwave.c:126:     g_armwave_state.xstride = target_height;
 126:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 865              		.loc 1 126 29 view .LVU227
 866 03d4 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 127:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 867              		.loc 1 127 5 is_stmt 1 view .LVU228
 128:armwave.c     ****     g_armwave_state.waves = waves;
 868              		.loc 1 128 5 view .LVU229
 129:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 869              		.loc 1 129 5 view .LVU230
 130:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 870              		.loc 1 130 5 view .LVU231
 131:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 871              		.loc 1 131 5 view .LVU232
 132:armwave.c     ****     g_armwave_state.target_width = target_width;
 872              		.loc 1 132 5 view .LVU233
 133:armwave.c     ****     g_armwave_state.target_height = target_height;
 873              		.loc 1 133 5 view .LVU234
 134:armwave.c     **** 
 874              		.loc 1 134 5 view .LVU235
 136:armwave.c     **** 
 875              		.loc 1 136 5 view .LVU236
 876              	@ armwave.c:133:     g_armwave_state.target_width = target_width;
 133:armwave.c     ****     g_armwave_state.target_height = target_height;
 877              		.loc 1 133 34 is_stmt 0 view .LVU237
 878 03d8 3C6084E5 		str	r6, [r4, #60]	@ target_width, g_armwave_state.target_width
 879              	@ armwave.c:134:     g_armwave_state.target_height = target_height;
 134:armwave.c     **** 
 880              		.loc 1 134 35 view .LVU238
 881 03dc 402084E5 		str	r2, [r4, #64]	@ target_height, g_armwave_state.target_height
 882              	@ armwave.c:130:     g_armwave_state.size = target_height * target_width;
 130:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 883              		.loc 1 130 26 view .LVU239
 884 03e0 38E084E5 		str	lr, [r4, #56]	@ tmp183, g_armwave_state.size
 885              	@ armwave.c:132:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 132:armwave.c     ****     g_armwave_state.target_width = target_width;
 886              		.loc 1 132 34 view .LVU240
 887 03e4 34C084E5 		str	ip, [r4, #52]	@ _9, g_armwave_state.ch_buff_size
 888              	@ armwave.c:136:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 136:armwave.c     **** 
 889              		.loc 1 136 5 view .LVU241
 890 03e8 FEFFFFEB 		bl	printf		@
 891              	.LVL42:
 141:armwave.c     **** 
 892              		.loc 1 141 5 is_stmt 1 view .LVU242
 893              	@ armwave.c:143:     if(g_armwave_state.ch1_buffer != NULL)
 143:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 894              		.loc 1 143 23 is_stmt 0 view .LVU243
 895 03ec 040094E5 		ldr	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 896              	@ armwave.c:141:     g_armwave_state.slice_height = 64;  
 141:armwave.c     **** 
 897              		.loc 1 141 34 view .LVU244
 898 03f0 4030A0E3 		mov	r3, #64	@ tmp191,
 899              	@ armwave.c:143:     if(g_armwave_state.ch1_buffer != NULL)
 143:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 900              		.loc 1 143 7 view .LVU245
 901 03f4 000050E3 		cmp	r0, #0	@ _10,
 902              	@ armwave.c:141:     g_armwave_state.slice_height = 64;  
 141:armwave.c     **** 
 903              		.loc 1 141 34 view .LVU246
 904 03f8 2C3084E5 		str	r3, [r4, #44]	@ tmp191, g_armwave_state.slice_height
 143:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 905              		.loc 1 143 5 is_stmt 1 view .LVU247
 906              	@ armwave.c:143:     if(g_armwave_state.ch1_buffer != NULL)
 143:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 907              		.loc 1 143 7 is_stmt 0 view .LVU248
 908 03fc 0000000A 		beq	.L53		@,
 144:armwave.c     **** 
 909              		.loc 1 144 9 is_stmt 1 view .LVU249
 910 0400 FEFFFFEB 		bl	free		@
 911              	.LVL43:
 912              	.L53:
 146:armwave.c     **** 
 913              		.loc 1 146 5 view .LVU250
 914              	@ armwave.c:146:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 146:armwave.c     **** 
 915              		.loc 1 146 34 is_stmt 0 view .LVU251
 916 0404 0110A0E3 		mov	r1, #1	@,
 917 0408 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 918 040c FEFFFFEB 		bl	calloc		@
 919              	.LVL44:
 920              	@ armwave.c:148:     assert(g_armwave_state.ch1_buffer != NULL);
 148:armwave.c     **** 
 921              		.loc 1 148 5 view .LVU252
 922 0410 000050E3 		cmp	r0, #0	@ tmp195,
 923              	@ armwave.c:146:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 146:armwave.c     **** 
 924              		.loc 1 146 32 view .LVU253
 925 0414 040084E5 		str	r0, [r4, #4]	@ tmp195, g_armwave_state.ch1_buffer
 148:armwave.c     **** 
 926              		.loc 1 148 5 is_stmt 1 view .LVU254
 927 0418 3600000A 		beq	.L65		@,
 151:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 928              		.loc 1 151 5 view .LVU255
 929              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 152:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 930              		.loc 1 152 34 is_stmt 0 view .LVU256
 931 041c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 932              	@ armwave.c:151:     length = end_point - start_point;
 151:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 933              		.loc 1 151 12 view .LVU257
 934 0420 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 935              	.LVL45:
 152:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 936              		.loc 1 152 5 is_stmt 1 view .LVU258
 937              	@ armwave.c:154:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 154:armwave.c     **** 
 938              		.loc 1 154 40 is_stmt 0 view .LVU259
 939 0424 8500A0E1 		lsl	r0, r5, #1	@, length,
 940              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 152:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 941              		.loc 1 152 34 view .LVU260
 942 0428 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp201, target_width
 943              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 152:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 944              		.loc 1 152 31 view .LVU261
 945 042c 905A07EE 		vmov	s15, r5	@ int	@ length, length
 946 0430 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp200, length
 947              	@ armwave.c:153:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 153:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 948              		.loc 1 153 60 view .LVU262
 949 0434 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp229, g_armwave_state.slice_height
 950 0438 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, tmp229
 951              	@ armwave.c:152:     points_per_pixel = length / ((float)(target_width));
 152:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 952              		.loc 1 152 22 view .LVU263
 953 043c 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp200, tmp201
 954              	.LVL46:
 153:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 955              		.loc 1 153 5 is_stmt 1 view .LVU264
 956              	@ armwave.c:153:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 153:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 957              		.loc 1 153 60 is_stmt 0 view .LVU265
 958 0440 887A67EE 		vmul.f32	s15, s15, s16	@ tmp206, tmp204, points_per_pixel
 959              	@ armwave.c:153:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 153:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 960              		.loc 1 153 41 view .LVU266
 961 0444 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp207, tmp206
 962 0448 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp207, g_armwave_state.slice_record_height
 154:armwave.c     **** 
 963              		.loc 1 154 5 is_stmt 1 view .LVU267
 964              	@ armwave.c:154:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 154:armwave.c     **** 
 965              		.loc 1 154 40 is_stmt 0 view .LVU268
 966 044c FEFFFFEB 		bl	malloc		@
 967              	.LVL47:
 968              	@ armwave.c:156:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 156:armwave.c     **** 
 969              		.loc 1 156 5 view .LVU269
 970 0450 000050E3 		cmp	r0, #0	@ tmp209,
 971              	@ armwave.c:154:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 154:armwave.c     **** 
 972              		.loc 1 154 38 view .LVU270
 973 0454 680084E5 		str	r0, [r4, #104]	@ tmp209, g_armwave_state.xcoord_to_xpixel
 156:armwave.c     **** 
 974              		.loc 1 156 5 is_stmt 1 view .LVU271
 975 0458 2B00000A 		beq	.L66		@,
 976              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 159:armwave.c     **** 
 977              		.loc 1 159 54 is_stmt 0 view .LVU272
 978 045c 347ADFED 		vldr.32	s15, .L67	@ tmp214,
 979 0460 020040E2 		sub	r0, r0, #2	@ ivtmp.55, tmp209,
 980              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 981              		.loc 1 158 12 view .LVU273
 982 0464 0030A0E3 		mov	r3, #0	@ xx,
 983              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 159:armwave.c     **** 
 984              		.loc 1 159 54 view .LVU274
 985 0468 887A87EE 		vdiv.f32	s14, s15, s16	@ _21, tmp214, points_per_pixel
 986              	.L56:
 987              	.LVL48:
 159:armwave.c     **** 
 988              		.loc 1 159 9 is_stmt 1 discriminator 3 view .LVU275
 989              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 159:armwave.c     **** 
 990              		.loc 1 159 74 is_stmt 0 discriminator 3 view .LVU276
 991 046c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 992              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 993              		.loc 1 158 32 discriminator 3 view .LVU277
 994 0470 013083E2 		add	r3, r3, #1	@ xx, xx,
 995              	.LVL49:
 996              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 997              		.loc 1 158 5 discriminator 3 view .LVU278
 998 0474 030055E1 		cmp	r5, r3	@ length, xx
 999              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 159:armwave.c     **** 
 1000              		.loc 1 159 74 discriminator 3 view .LVU279
 1001 0478 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp215, xx
 1002 047c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp216, tmp215, _21
 1003              	@ armwave.c:159:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 159:armwave.c     **** 
 1004              		.loc 1 159 46 discriminator 3 view .LVU280
 1005 0480 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp217, tmp216
 1006 0484 902A17EE 		vmov	r2, s15	@ int	@ tmp217, tmp217
 1007 0488 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp217, MEM[base: _78, offset: 0B]
 1008              	@ armwave.c:158:     for(xx = 0; xx < length; xx++) {
 158:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1009              		.loc 1 158 5 discriminator 3 view .LVU281
 1010 048c F6FFFF1A 		bne	.L56		@,
 164:armwave.c     **** }
 1011              		.loc 1 164 5 is_stmt 1 view .LVU282
 1012              	@ armwave.c:164:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 164:armwave.c     **** }
 1013              		.loc 1 164 34 is_stmt 0 view .LVU283
 1014 0490 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 1015 0494 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1016 0498 FEFFFFEB 		bl	malloc		@
 1017              	.LVL50:
 1018              	@ armwave.c:165: }
 1019              		.loc 1 165 1 view .LVU284
 1020 049c 028BBDEC 		vldm	sp!, {d8}	@
 1021              		.cfi_remember_state
 1022              		.cfi_restore 80
 1023              		.cfi_restore 81
 1024              		.cfi_def_cfa_offset 24
 1025              	.LVL51:
 1026              	@ armwave.c:164:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 164:armwave.c     **** }
 1027              		.loc 1 164 32 view .LVU285
 1028 04a0 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 1029              	@ armwave.c:165: }
 1030              		.loc 1 165 1 view .LVU286
 1031 04a4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1032              	.LVL52:
 1033              	.L48:
 1034              		.cfi_restore_state
 111:armwave.c     ****         g_armwave_state.row_shift = 8;
 1035              		.loc 1 111 5 is_stmt 1 view .LVU287
 1036              	@ armwave.c:111:     if(target_height == 256) {
 111:armwave.c     ****         g_armwave_state.row_shift = 8;
 1037              		.loc 1 111 7 is_stmt 0 view .LVU288
 1038 04a8 010C52E3 		cmp	r2, #256	@ target_height,
 112:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1039              		.loc 1 112 9 is_stmt 1 view .LVU289
 1040              	@ armwave.c:112:         g_armwave_state.row_shift = 8;
 112:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1041              		.loc 1 112 35 is_stmt 0 view .LVU290
 1042 04ac 08C0A003 		moveq	ip, #8	@ tmp162,
 1043              	@ armwave.c:116:         g_armwave_state.row_mask = 0x1ff;
 116:armwave.c     ****     } else if(target_height == 1024) {
 1044              		.loc 1 116 34 view .LVU291
 1045 04b0 8CC09F15 		ldrne	ip, .L67+16	@ tmp168,
 1046              	@ armwave.c:113:         g_armwave_state.row_mask = 0x0ff;
 113:armwave.c     ****     } else if(target_height == 512) {
 1047              		.loc 1 113 34 view .LVU292
 1048 04b4 FF00A003 		moveq	r0, #255	@ tmp164,
 1049              	.LVL53:
 1050              	@ armwave.c:115:         g_armwave_state.row_shift = 9;
 115:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1051              		.loc 1 115 35 view .LVU293
 1052 04b8 0900A013 		movne	r0, #9	@ tmp166,
 1053              	@ armwave.c:112:         g_armwave_state.row_shift = 8;
 112:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1054              		.loc 1 112 35 view .LVU294
 1055 04bc 44C08405 		streq	ip, [r4, #68]	@ tmp162, g_armwave_state.row_shift
 113:armwave.c     ****     } else if(target_height == 512) {
 1056              		.loc 1 113 9 is_stmt 1 view .LVU295
 1057              	@ armwave.c:113:         g_armwave_state.row_mask = 0x0ff;
 113:armwave.c     ****     } else if(target_height == 512) {
 1058              		.loc 1 113 34 is_stmt 0 view .LVU296
 1059 04c0 48008405 		streq	r0, [r4, #72]	@ tmp164, g_armwave_state.row_mask
 114:armwave.c     ****         g_armwave_state.row_shift = 9;
 1060              		.loc 1 114 12 is_stmt 1 view .LVU297
 115:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1061              		.loc 1 115 9 view .LVU298
 1062              	@ armwave.c:116:         g_armwave_state.row_mask = 0x1ff;
 116:armwave.c     ****     } else if(target_height == 1024) {
 1063              		.loc 1 116 34 is_stmt 0 view .LVU299
 1064 04c4 48C08415 		strne	ip, [r4, #72]	@ tmp168, g_armwave_state.row_mask
 1065              	@ armwave.c:115:         g_armwave_state.row_shift = 9;
 115:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1066              		.loc 1 115 35 view .LVU300
 1067 04c8 44008415 		strne	r0, [r4, #68]	@ tmp166, g_armwave_state.row_shift
 116:armwave.c     ****     } else if(target_height == 1024) {
 1068              		.loc 1 116 9 is_stmt 1 view .LVU301
 1069 04cc B6FFFFEA 		b	.L51		@
 1070              	.L64:
 118:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1071              		.loc 1 118 9 view .LVU302
 1072              	@ armwave.c:119:         g_armwave_state.row_mask = 0x3ff;
 119:armwave.c     ****     } else if(target_height == 2048) {
 1073              		.loc 1 119 34 is_stmt 0 view .LVU303
 1074 04d0 70C09FE5 		ldr	ip, .L67+20	@ tmp172,
 1075              	@ armwave.c:118:         g_armwave_state.row_shift = 10;
 118:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1076              		.loc 1 118 35 view .LVU304
 1077 04d4 0A00A0E3 		mov	r0, #10	@ tmp170,
 1078              	@ armwave.c:119:         g_armwave_state.row_mask = 0x3ff;
 119:armwave.c     ****     } else if(target_height == 2048) {
 1079              		.loc 1 119 34 view .LVU305
 1080 04d8 48C084E5 		str	ip, [r4, #72]	@ tmp172, g_armwave_state.row_mask
 1081              	@ armwave.c:118:         g_armwave_state.row_shift = 10;
 118:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1082              		.loc 1 118 35 view .LVU306
 1083 04dc 440084E5 		str	r0, [r4, #68]	@ tmp170, g_armwave_state.row_shift
 119:armwave.c     ****     } else if(target_height == 2048) {
 1084              		.loc 1 119 9 is_stmt 1 view .LVU307
 1085 04e0 B1FFFFEA 		b	.L51		@
 1086              	.L63:
 109:armwave.c     **** 
 1087              		.loc 1 109 5 discriminator 2 view .LVU308
 1088 04e4 60309FE5 		ldr	r3, .L67+24	@,
 1089              	.LVL54:
 109:armwave.c     **** 
 1090              		.loc 1 109 5 is_stmt 0 discriminator 2 view .LVU309
 1091 04e8 6D20A0E3 		mov	r2, #109	@,
 1092 04ec 5C109FE5 		ldr	r1, .L67+28	@,
 1093 04f0 5C009FE5 		ldr	r0, .L67+32	@,
 1094 04f4 FEFFFFEB 		bl	__assert_fail		@
 1095              	.LVL55:
 1096              	.L65:
 148:armwave.c     **** 
 1097              		.loc 1 148 5 is_stmt 1 discriminator 1 view .LVU310
 1098 04f8 4C309FE5 		ldr	r3, .L67+24	@,
 1099 04fc 9420A0E3 		mov	r2, #148	@,
 1100 0500 48109FE5 		ldr	r1, .L67+28	@,
 1101 0504 4C009FE5 		ldr	r0, .L67+36	@,
 1102 0508 FEFFFFEB 		bl	__assert_fail		@
 1103              	.LVL56:
 1104              	.L66:
 156:armwave.c     **** 
 1105              		.loc 1 156 5 discriminator 1 view .LVU311
 1106 050c 38309FE5 		ldr	r3, .L67+24	@,
 1107 0510 9C20A0E3 		mov	r2, #156	@,
 1108 0514 34109FE5 		ldr	r1, .L67+28	@,
 1109 0518 3C009FE5 		ldr	r0, .L67+40	@,
 1110 051c FEFFFFEB 		bl	__assert_fail		@
 1111              	.LVL57:
 1112              	.L62:
 103:armwave.c     **** 
 1113              		.loc 1 103 5 discriminator 1 view .LVU312
 1114 0520 24309FE5 		ldr	r3, .L67+24	@,
 1115              	.LVL58:
 103:armwave.c     **** 
 1116              		.loc 1 103 5 is_stmt 0 discriminator 1 view .LVU313
 1117 0524 6720A0E3 		mov	r2, #103	@,
 1118 0528 20109FE5 		ldr	r1, .L67+28	@,
 1119 052c 2C009FE5 		ldr	r0, .L67+44	@,
 1120              	.LVL59:
 103:armwave.c     **** 
 1121              		.loc 1 103 5 discriminator 1 view .LVU314
 1122 0530 FEFFFFEB 		bl	__assert_fail		@
 1123              	.LVL60:
 1124              	.L68:
 1125              		.align	2
 1126              	.L67:
 1127 0534 0000803F 		.word	1065353216
 1128 0538 00000000 		.word	g_armwave_state
 1129 053c FF070000 		.word	2047
 1130 0540 6C000000 		.word	.LC2
 1131 0544 FF010000 		.word	511
 1132 0548 FF030000 		.word	1023
 1133 054c 00000000 		.word	.LANCHOR0
 1134 0550 00000000 		.word	.LC0
 1135 0554 0C000000 		.word	.LC1
 1136 0558 80000000 		.word	.LC3
 1137 055c A4000000 		.word	.LC4
 1138 0560 D0000000 		.word	.LC5
 1139              		.cfi_endproc
 1140              	.LFE60:
 1142              		.align	2
 1143              		.global	armwave_clear_buffer
 1144              		.syntax unified
 1145              		.arm
 1146              		.fpu vfp
 1148              	armwave_clear_buffer:
 1149              	.LVL61:
 1150              	.LFB61:
 166:armwave.c     **** 
 167:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 168:armwave.c     **** {
 1151              		.loc 1 168 1 is_stmt 1 view -0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 169:armwave.c     ****     // Flags ignored, only one buffer cleared
 170:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1156              		.loc 1 170 5 view .LVU316
 1157 0564 0C309FE5 		ldr	r3, .L70	@ tmp113,
 1158 0568 0010A0E3 		mov	r1, #0	@,
 1159 056c 382093E5 		ldr	r2, [r3, #56]	@, g_armwave_state.size
 1160 0570 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1161              	.LVL62:
 1162              		.loc 1 170 5 is_stmt 0 view .LVU317
 1163 0574 FEFFFFEA 		b	memset		@
 1164              	.LVL63:
 1165              	.L71:
 1166              		.align	2
 1167              	.L70:
 1168 0578 00000000 		.word	g_armwave_state
 1169              		.cfi_endproc
 1170              	.LFE61:
 1172              		.align	2
 1173              		.global	armwave_set_channel_colour
 1174              		.syntax unified
 1175              		.arm
 1176              		.fpu vfp
 1178              	armwave_set_channel_colour:
 1179              	.LVL64:
 1180              	.LFB62:
 171:armwave.c     **** }
 172:armwave.c     **** 
 173:armwave.c     **** /*
 174:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 175:armwave.c     ****  */
 176:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 177:armwave.c     **** {
 1181              		.loc 1 177 1 is_stmt 1 view -0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185              		@ link register save eliminated.
 178:armwave.c     ****     // Only 1ch supported for now
 179:armwave.c     ****     switch(ch) {
 1186              		.loc 1 179 5 view .LVU319
 1187 057c 010050E3 		cmp	r0, #1	@ ch,
 180:armwave.c     ****         case 1:
 181:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1188              		.loc 1 181 13 view .LVU320
 1189              	@ armwave.c:181:             g_armwave_state.ch1_color.r = r;
 1190              		.loc 1 181 41 is_stmt 0 view .LVU321
 1191 0580 0C009F05 		ldreq	r0, .L74	@ tmp117,
 1192              	.LVL65:
 1193              		.loc 1 181 41 view .LVU322
 1194 0584 B015C001 		strheq	r1, [r0, #80]	@ movhi	@ r, g_armwave_state.ch1_color.r
 182:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1195              		.loc 1 182 13 is_stmt 1 view .LVU323
 1196              	@ armwave.c:182:             g_armwave_state.ch1_color.g = g;
 1197              		.loc 1 182 41 is_stmt 0 view .LVU324
 1198 0588 B225C001 		strheq	r2, [r0, #82]	@ movhi	@ g, g_armwave_state.ch1_color.g
 183:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1199              		.loc 1 183 13 is_stmt 1 view .LVU325
 1200              	@ armwave.c:183:             g_armwave_state.ch1_color.b = b;
 1201              		.loc 1 183 41 is_stmt 0 view .LVU326
 1202 058c B435C001 		strheq	r3, [r0, #84]	@ movhi	@ b, g_armwave_state.ch1_color.b
 184:armwave.c     ****             break;
 1203              		.loc 1 184 13 is_stmt 1 view .LVU327
 1204              	@ armwave.c:186: }
 185:armwave.c     ****     }
 186:armwave.c     **** }
 1205              		.loc 1 186 1 is_stmt 0 view .LVU328
 1206 0590 1EFF2FE1 		bx	lr	@
 1207              	.L75:
 1208              		.align	2
 1209              	.L74:
 1210 0594 00000000 		.word	g_armwave_state
 1211              		.cfi_endproc
 1212              	.LFE62:
 1214              		.align	2
 1215              		.global	armwave_fill_pixbuf_256
 1216              		.syntax unified
 1217              		.arm
 1218              		.fpu vfp
 1220              	armwave_fill_pixbuf_256:
 1221              	.LVL66:
 1222              	.LFB63:
 187:armwave.c     **** 
 188:armwave.c     **** /*
 189:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 190:armwave.c     ****  */
 191:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 192:armwave.c     **** {
 1223              		.loc 1 192 1 is_stmt 1 view -0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 8
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 193:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1227              		.loc 1 193 5 view .LVU330
 194:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1228              		.loc 1 194 5 view .LVU331
 195:armwave.c     ****     uint8_t r, g, b, value;
 1229              		.loc 1 195 5 view .LVU332
 196:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1230              		.loc 1 196 5 view .LVU333
 1231              	@ armwave.c:192: {
 192:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1232              		.loc 1 192 1 is_stmt 0 view .LVU334
 1233 0598 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1234              		.cfi_def_cfa_offset 36
 1235              		.cfi_offset 4, -36
 1236              		.cfi_offset 5, -32
 1237              		.cfi_offset 6, -28
 1238              		.cfi_offset 7, -24
 1239              		.cfi_offset 8, -20
 1240              		.cfi_offset 9, -16
 1241              		.cfi_offset 10, -12
 1242              		.cfi_offset 11, -8
 1243              		.cfi_offset 14, -4
 1244              	@ armwave.c:200:     assert(out_buffer != NULL);
 197:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 198:armwave.c     ****     uint32_t offset;
 199:armwave.c     **** 
 200:armwave.c     ****     assert(out_buffer != NULL);
 1245              		.loc 1 200 5 view .LVU335
 1246 059c 000050E3 		cmp	r0, #0	@ out_buffer
 1247              	@ armwave.c:196:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 196:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1248              		.loc 1 196 15 view .LVU336
 1249 05a0 44529FE5 		ldr	r5, .L103	@ tmp361,
 1250              	@ armwave.c:192: {
 192:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1251              		.loc 1 192 1 view .LVU337
 1252 05a4 0CD04DE2 		sub	sp, sp, #12	@,,
 1253              		.cfi_def_cfa_offset 48
 1254              	@ armwave.c:196:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 196:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1255              		.loc 1 196 15 view .LVU338
 1256 05a8 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1257              	.LVL67:
 197:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1258              		.loc 1 197 5 is_stmt 1 view .LVU339
 198:armwave.c     **** 
 1259              		.loc 1 198 5 view .LVU340
 1260              		.loc 1 200 5 view .LVU341
 1261 05ac 8900000A 		beq	.L101		@,
 201:armwave.c     **** 
 202:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 203:armwave.c     **** 
 204:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1262              		.loc 1 204 5 view .LVU342
 1263              	@ armwave.c:204:     npix = g_armwave_state.target_width * 256;
 1264              		.loc 1 204 41 is_stmt 0 view .LVU343
 1265 05b0 3CC095E5 		ldr	ip, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1266 05b4 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 1267              	.LVL68:
 205:armwave.c     **** 
 206:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1268              		.loc 1 206 5 is_stmt 1 view .LVU344
 1269              		.loc 1 206 5 is_stmt 0 view .LVU345
 1270 05b8 00005CE3 		cmp	ip, #0	@ npix,
 1271 05bc 0A0000DA 		ble	.L76		@,
 1272              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 207:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 208:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 209:armwave.c     ****         // most normal waveforms.
 210:armwave.c     ****         wave_word = *base_32ptr++;
 211:armwave.c     **** 
 212:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 213:armwave.c     ****             for(i = 0; i < 4; i++) {
 214:armwave.c     ****                 value = wave_word & 0xff;
 215:armwave.c     ****                 wave_word >>= 8;
 216:armwave.c     **** 
 217:armwave.c     ****                 if(value != 0) {
 218:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1273              		.loc 1 218 52 view .LVU346
 1274 05c0 F0A5D5E1 		ldrsh	r10, [r5, #80]	@ _70, g_armwave_state.ch1_color.r
 1275              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1276              		.loc 1 219 52 view .LVU347
 1277 05c4 F295D5E1 		ldrsh	r9, [r5, #82]	@ _76, g_armwave_state.ch1_color.g
 1278              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1279              		.loc 1 220 52 view .LVU348
 1280 05c8 F4B5D5E1 		ldrsh	fp, [r5, #84]	@ _80, g_armwave_state.ch1_color.b
 1281              	@ armwave.c:206:     for(n = 0; n < npix; n += 4) {
 206:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1282              		.loc 1 206 11 view .LVU349
 1283 05cc 0030A0E3 		mov	r3, #0	@ n,
 1284 05d0 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 1285              	.LVL69:
 1286              	.L85:
 210:armwave.c     **** 
 1287              		.loc 1 210 9 is_stmt 1 view .LVU350
 1288              	@ armwave.c:210:         wave_word = *base_32ptr++;
 210:armwave.c     **** 
 1289              		.loc 1 210 19 is_stmt 0 view .LVU351
 1290 05d4 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 1291              	.LVL70:
 212:armwave.c     ****             for(i = 0; i < 4; i++) {
 1292              		.loc 1 212 9 is_stmt 1 view .LVU352
 1293              	@ armwave.c:212:         if(COND_UNLIKELY(wave_word != 0)) {
 212:armwave.c     ****             for(i = 0; i < 4; i++) {
 1294              		.loc 1 212 11 is_stmt 0 view .LVU353
 1295 05d8 000052E3 		cmp	r2, #0	@ wave_word,
 1296 05dc 0400001A 		bne	.L102		@,
 1297              	.LVL71:
 1298              	.L80:
 1299              	@ armwave.c:206:     for(n = 0; n < npix; n += 4) {
 206:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1300              		.loc 1 206 28 discriminator 2 view .LVU354
 1301 05e0 043083E2 		add	r3, r3, #4	@ n, n,
 1302              	.LVL72:
 1303              	@ armwave.c:206:     for(n = 0; n < npix; n += 4) {
 206:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1304              		.loc 1 206 5 discriminator 2 view .LVU355
 1305 05e4 03005CE1 		cmp	ip, r3	@ npix, n
 1306 05e8 F9FFFFCA 		bgt	.L85		@,
 1307              	.LVL73:
 1308              	.L76:
 1309              	@ armwave.c:239: }
 221:armwave.c     **** 
 222:armwave.c     ****                     r = MIN(rr, 255);
 223:armwave.c     ****                     g = MIN(gg, 255);
 224:armwave.c     ****                     b = MIN(bb, 255);
 225:armwave.c     **** 
 226:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 227:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 228:armwave.c     **** 
 229:armwave.c     ****                     // Is there a better way?
 230:armwave.c     ****                     nsub = n + i;
 231:armwave.c     ****                     xx = nsub & 0xff;
 232:armwave.c     ****                     yy = nsub >> 8;
 233:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 234:armwave.c     ****                     *(out_buffer_base + offset) = word;
 235:armwave.c     ****                 }
 236:armwave.c     ****             }
 237:armwave.c     ****         } 
 238:armwave.c     ****     }
 239:armwave.c     **** }
 1310              		.loc 1 239 1 view .LVU356
 1311 05ec 0CD08DE2 		add	sp, sp, #12	@,,
 1312              		.cfi_remember_state
 1313              		.cfi_def_cfa_offset 36
 1314              		@ sp needed	@
 1315 05f0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1316              	.LVL74:
 1317              	.L102:
 1318              		.cfi_restore_state
 214:armwave.c     ****                 wave_word >>= 8;
 1319              		.loc 1 214 17 is_stmt 1 view .LVU357
 215:armwave.c     **** 
 1320              		.loc 1 215 17 view .LVU358
 1321              	@ armwave.c:217:                 if(value != 0) {
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1322              		.loc 1 217 19 is_stmt 0 view .LVU359
 1323 05f4 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 1324              	@ armwave.c:215:                 wave_word >>= 8;
 215:armwave.c     **** 
 1325              		.loc 1 215 27 view .LVU360
 1326 05f8 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 1327              	.LVL75:
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1328              		.loc 1 217 17 is_stmt 1 view .LVU361
 1329              	@ armwave.c:217:                 if(value != 0) {
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1330              		.loc 1 217 19 is_stmt 0 view .LVU362
 1331 05fc 1900000A 		beq	.L81		@,
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1332              		.loc 1 218 21 is_stmt 1 view .LVU363
 1333              	.LVL76:
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1334              		.loc 1 219 21 view .LVU364
 220:armwave.c     **** 
 1335              		.loc 1 220 21 view .LVU365
 222:armwave.c     ****                     g = MIN(gg, 255);
 1336              		.loc 1 222 21 view .LVU366
 223:armwave.c     ****                     b = MIN(bb, 255);
 1337              		.loc 1 223 21 view .LVU367
 224:armwave.c     **** 
 1338              		.loc 1 224 21 view .LVU368
 227:armwave.c     **** 
 1339              		.loc 1 227 21 view .LVU369
 230:armwave.c     ****                     xx = nsub & 0xff;
 1340              		.loc 1 230 21 view .LVU370
 231:armwave.c     ****                     yy = nsub >> 8;
 1341              		.loc 1 231 21 view .LVU371
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1342              		.loc 1 232 21 view .LVU372
 233:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1343              		.loc 1 233 21 view .LVU373
 234:armwave.c     ****                 }
 1344              		.loc 1 234 21 view .LVU374
 1345              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1346              		.loc 1 220 55 is_stmt 0 view .LVU375
 1347 0600 9B0604E0 		mul	r4, fp, r6	@ tmp277, _80, _72
 1348              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1349              		.loc 1 219 55 view .LVU376
 1350 0604 990608E0 		mul	r8, r9, r6	@ tmp281, _76, _72
 1351              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1352              		.loc 1 220 24 view .LVU377
 1353 0608 4444A0E1 		asr	r4, r4, #8	@ bb, tmp277,
 1354              	.LVL77:
 1355              	@ armwave.c:224:                     b = MIN(bb, 255);
 224:armwave.c     **** 
 1356              		.loc 1 224 25 view .LVU378
 1357 060c FF0054E3 		cmp	r4, #255	@ bb,
 1358              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1359              		.loc 1 219 24 view .LVU379
 1360 0610 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1361              	.LVL78:
 1362              	@ armwave.c:224:                     b = MIN(bb, 255);
 224:armwave.c     **** 
 1363              		.loc 1 224 25 view .LVU380
 1364 0614 FF40A0A3 		movge	r4, #255	@ bb,
 1365              	.LVL79:
 1366              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1367              		.loc 1 218 55 view .LVU381
 1368 0618 960A06E0 		mul	r6, r6, r10	@ tmp287, _72, _70
 1369              	.LVL80:
 1370              	@ armwave.c:223:                     g = MIN(gg, 255);
 223:armwave.c     ****                     b = MIN(bb, 255);
 1371              		.loc 1 223 25 view .LVU382
 1372 061c FF0058E3 		cmp	r8, #255	@ gg,
 1373 0620 FF80A0A3 		movge	r8, #255	@ gg,
 1374              	.LVL81:
 1375              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1376              		.loc 1 218 24 view .LVU383
 1377 0624 4664A0E1 		asr	r6, r6, #8	@ rr, tmp287,
 1378              	.LVL82:
 1379              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1380              		.loc 1 227 56 view .LVU384
 1381 0628 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1382              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1383              		.loc 1 234 39 view .LVU385
 1384 062c 3C0095E5 		ldr	r0, [r5, #60]	@ tmp373, g_armwave_state.target_width
 1385              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1386              		.loc 1 227 44 view .LVU386
 1387 0630 0448A0E1 		lsl	r4, r4, #16	@ tmp278, bb,
 1388              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1389              		.loc 1 222 25 view .LVU387
 1390 0634 FF0056E3 		cmp	r6, #255	@ rr,
 1391              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1392              		.loc 1 227 56 view .LVU388
 1393 0638 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1394              	@ armwave.c:231:                     xx = nsub & 0xff;
 231:armwave.c     ****                     yy = nsub >> 8;
 1395              		.loc 1 231 24 view .LVU389
 1396 063c 7370EFE6 		uxtb	r7, r3	@ xx, n
 1397              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1398              		.loc 1 227 44 view .LVU390
 1399 0640 FF4804E2 		and	r4, r4, #16711680	@ tmp279, tmp278,
 1400              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1401              		.loc 1 227 51 view .LVU391
 1402 0644 084084E1 		orr	r4, r4, r8	@ tmp285, tmp279, tmp283
 1403              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1404              		.loc 1 222 25 view .LVU392
 1405 0648 FF60A0A3 		movge	r6, #255	@ rr,
 1406              	.LVL83:
 1407              	@ armwave.c:232:                     yy = nsub >> 8;
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1408              		.loc 1 232 31 view .LVU393
 1409 064c 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1410              	.LVL84:
 1411              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1412              		.loc 1 234 39 view .LVU394
 1413 0650 908727E0 		mla	r7, r0, r7, r8	@ tmp275, tmp373, xx, yy
 1414              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1415              		.loc 1 227 62 view .LVU395
 1416 0654 7660EFE6 		uxtb	r6, r6	@ rr, rr
 1417              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1418              		.loc 1 234 49 view .LVU396
 1419 0658 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1420              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1421              		.loc 1 227 62 view .LVU397
 1422 065c 066084E1 		orr	r6, r4, r6	@ tmp289, tmp285, rr
 1423              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1424              		.loc 1 227 26 view .LVU398
 1425 0660 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp289,
 1426              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1427              		.loc 1 234 49 view .LVU399
 1428 0664 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 1429              	.LVL85:
 1430              	.L81:
 214:armwave.c     ****                 wave_word >>= 8;
 1431              		.loc 1 214 17 is_stmt 1 view .LVU400
 215:armwave.c     **** 
 1432              		.loc 1 215 17 view .LVU401
 1433              	@ armwave.c:217:                 if(value != 0) {
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1434              		.loc 1 217 19 is_stmt 0 view .LVU402
 1435 0668 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 1436              	.LVL86:
 1437              	@ armwave.c:215:                 wave_word >>= 8;
 215:armwave.c     **** 
 1438              		.loc 1 215 27 view .LVU403
 1439 066c 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1440              	.LVL87:
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1441              		.loc 1 217 17 is_stmt 1 view .LVU404
 1442              	@ armwave.c:217:                 if(value != 0) {
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1443              		.loc 1 217 19 is_stmt 0 view .LVU405
 1444 0670 1C00000A 		beq	.L82		@,
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1445              		.loc 1 218 21 is_stmt 1 view .LVU406
 1446              	.LVL88:
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1447              		.loc 1 219 21 view .LVU407
 220:armwave.c     **** 
 1448              		.loc 1 220 21 view .LVU408
 222:armwave.c     ****                     g = MIN(gg, 255);
 1449              		.loc 1 222 21 view .LVU409
 223:armwave.c     ****                     b = MIN(bb, 255);
 1450              		.loc 1 223 21 view .LVU410
 224:armwave.c     **** 
 1451              		.loc 1 224 21 view .LVU411
 227:armwave.c     **** 
 1452              		.loc 1 227 21 view .LVU412
 230:armwave.c     ****                     xx = nsub & 0xff;
 1453              		.loc 1 230 21 view .LVU413
 1454              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1455              		.loc 1 220 55 is_stmt 0 view .LVU414
 1456 0674 9E0B04E0 		mul	r4, lr, fp	@ tmp300, _118, _80
 1457              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1458              		.loc 1 219 55 view .LVU415
 1459 0678 9E0907E0 		mul	r7, lr, r9	@ tmp304, _118, _76
 1460              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1461              		.loc 1 220 24 view .LVU416
 1462 067c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp300,
 1463              	.LVL89:
 1464              	@ armwave.c:224:                     b = MIN(bb, 255);
 224:armwave.c     **** 
 1465              		.loc 1 224 25 view .LVU417
 1466 0680 FF0054E3 		cmp	r4, #255	@ bb,
 1467 0684 FF40A0A3 		movge	r4, #255	@ bb,
 1468              	.LVL90:
 1469              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1470              		.loc 1 218 55 view .LVU418
 1471 0688 9E0A0EE0 		mul	lr, lr, r10	@ tmp310, _118, _70
 1472              	.LVL91:
 1473              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1474              		.loc 1 219 24 view .LVU419
 1475 068c 4774A0E1 		asr	r7, r7, #8	@ gg, tmp304,
 1476              	.LVL92:
 1477              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1478              		.loc 1 227 44 view .LVU420
 1479 0690 0448A0E1 		lsl	r4, r4, #16	@ tmp301, bb,
 1480              	@ armwave.c:223:                     g = MIN(gg, 255);
 223:armwave.c     ****                     b = MIN(bb, 255);
 1481              		.loc 1 223 25 view .LVU421
 1482 0694 FF0057E3 		cmp	r7, #255	@ gg,
 1483 0698 016083E2 		add	r6, r3, #1	@ _158, n,
 231:armwave.c     ****                     yy = nsub >> 8;
 1484              		.loc 1 231 21 is_stmt 1 view .LVU422
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1485              		.loc 1 232 21 view .LVU423
 233:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1486              		.loc 1 233 21 view .LVU424
 234:armwave.c     ****                 }
 1487              		.loc 1 234 21 view .LVU425
 1488              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1489              		.loc 1 227 44 is_stmt 0 view .LVU426
 1490 069c FF4804E2 		and	r4, r4, #16711680	@ tmp302, tmp301,
 1491              	@ armwave.c:223:                     g = MIN(gg, 255);
 223:armwave.c     ****                     b = MIN(bb, 255);
 1492              		.loc 1 223 25 view .LVU427
 1493 06a0 FF70A0A3 		movge	r7, #255	@ gg,
 1494              	.LVL93:
 1495              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1496              		.loc 1 227 44 view .LVU428
 1497 06a4 04408DE5 		str	r4, [sp, #4]	@ tmp302, %sfp
 1498              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1499              		.loc 1 234 39 view .LVU429
 1500 06a8 3C4095E5 		ldr	r4, [r5, #60]	@ tmp376, g_armwave_state.target_width
 1501              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1502              		.loc 1 218 24 view .LVU430
 1503 06ac 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp310,
 1504              	.LVL94:
 1505              	@ armwave.c:231:                     xx = nsub & 0xff;
 231:armwave.c     ****                     yy = nsub >> 8;
 1506              		.loc 1 231 24 view .LVU431
 1507 06b0 7600EFE6 		uxtb	r0, r6	@ xx, _158
 1508              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1509              		.loc 1 222 25 view .LVU432
 1510 06b4 FF005EE3 		cmp	lr, #255	@ rr,
 1511              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1512              		.loc 1 227 56 view .LVU433
 1513 06b8 0774A0E1 		lsl	r7, r7, #8	@ tmp305, gg,
 1514              	@ armwave.c:232:                     yy = nsub >> 8;
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1515              		.loc 1 232 31 view .LVU434
 1516 06bc 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 1517              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1518              		.loc 1 234 39 view .LVU435
 1519 06c0 946026E0 		mla	r6, r4, r0, r6	@ tmp298, tmp376, xx, yy
 1520              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1521              		.loc 1 222 25 view .LVU436
 1522 06c4 FFE0A0A3 		movge	lr, #255	@ rr,
 1523              	.LVL95:
 1524              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1525              		.loc 1 227 51 view .LVU437
 1526 06c8 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1527              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1528              		.loc 1 227 56 view .LVU438
 1529 06cc 7770FFE6 		uxth	r7, r7	@ tmp306, tmp305
 1530              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1531              		.loc 1 227 51 view .LVU439
 1532 06d0 074080E1 		orr	r4, r0, r7	@ tmp308, tmp302, tmp306
 1533              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1534              		.loc 1 227 62 view .LVU440
 1535 06d4 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1536              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1537              		.loc 1 234 49 view .LVU441
 1538 06d8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1539              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1540              		.loc 1 227 62 view .LVU442
 1541 06dc 0EE084E1 		orr	lr, r4, lr	@ tmp312, tmp308, rr
 1542              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1543              		.loc 1 227 26 view .LVU443
 1544 06e0 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp312,
 1545              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1546              		.loc 1 234 49 view .LVU444
 1547 06e4 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 1548              	.LVL96:
 1549              	.L82:
 214:armwave.c     ****                 wave_word >>= 8;
 1550              		.loc 1 214 17 is_stmt 1 view .LVU445
 215:armwave.c     **** 
 1551              		.loc 1 215 17 view .LVU446
 1552              	@ armwave.c:217:                 if(value != 0) {
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1553              		.loc 1 217 19 is_stmt 0 view .LVU447
 1554 06e8 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 1555              	@ armwave.c:215:                 wave_word >>= 8;
 215:armwave.c     **** 
 1556              		.loc 1 215 27 view .LVU448
 1557 06ec 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1558              	.LVL97:
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1559              		.loc 1 217 17 is_stmt 1 view .LVU449
 1560              	@ armwave.c:217:                 if(value != 0) {
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1561              		.loc 1 217 19 is_stmt 0 view .LVU450
 1562 06f0 1A00000A 		beq	.L83		@,
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1563              		.loc 1 218 21 is_stmt 1 view .LVU451
 1564              	.LVL98:
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1565              		.loc 1 219 21 view .LVU452
 220:armwave.c     **** 
 1566              		.loc 1 220 21 view .LVU453
 222:armwave.c     ****                     g = MIN(gg, 255);
 1567              		.loc 1 222 21 view .LVU454
 223:armwave.c     ****                     b = MIN(bb, 255);
 1568              		.loc 1 223 21 view .LVU455
 224:armwave.c     **** 
 1569              		.loc 1 224 21 view .LVU456
 227:armwave.c     **** 
 1570              		.loc 1 227 21 view .LVU457
 230:armwave.c     ****                     xx = nsub & 0xff;
 1571              		.loc 1 230 21 view .LVU458
 1572              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1573              		.loc 1 220 55 is_stmt 0 view .LVU459
 1574 06f4 9E0B04E0 		mul	r4, lr, fp	@ tmp323, _164, _80
 1575              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1576              		.loc 1 219 55 view .LVU460
 1577 06f8 9E0906E0 		mul	r6, lr, r9	@ tmp327, _164, _76
 1578              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1579              		.loc 1 220 24 view .LVU461
 1580 06fc 4444A0E1 		asr	r4, r4, #8	@ bb, tmp323,
 1581              	.LVL99:
 1582              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1583              		.loc 1 218 55 view .LVU462
 1584 0700 9E0A0EE0 		mul	lr, lr, r10	@ tmp333, _164, _70
 1585              	.LVL100:
 1586              	@ armwave.c:224:                     b = MIN(bb, 255);
 224:armwave.c     **** 
 1587              		.loc 1 224 25 view .LVU463
 1588 0704 FF0054E3 		cmp	r4, #255	@ bb,
 1589              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1590              		.loc 1 219 24 view .LVU464
 1591 0708 4664A0E1 		asr	r6, r6, #8	@ gg, tmp327,
 1592              	.LVL101:
 1593              	@ armwave.c:224:                     b = MIN(bb, 255);
 224:armwave.c     **** 
 1594              		.loc 1 224 25 view .LVU465
 1595 070c FF40A0A3 		movge	r4, #255	@ bb,
 1596              	.LVL102:
 1597              	@ armwave.c:223:                     g = MIN(gg, 255);
 223:armwave.c     ****                     b = MIN(bb, 255);
 1598              		.loc 1 223 25 view .LVU466
 1599 0710 FF0056E3 		cmp	r6, #255	@ gg,
 1600 0714 FF60A0A3 		movge	r6, #255	@ gg,
 1601              	.LVL103:
 223:armwave.c     ****                     b = MIN(bb, 255);
 1602              		.loc 1 223 25 view .LVU467
 1603 0718 027083E2 		add	r7, r3, #2	@ _66, n,
 231:armwave.c     ****                     yy = nsub >> 8;
 1604              		.loc 1 231 21 is_stmt 1 view .LVU468
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1605              		.loc 1 232 21 view .LVU469
 233:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1606              		.loc 1 233 21 view .LVU470
 234:armwave.c     ****                 }
 1607              		.loc 1 234 21 view .LVU471
 1608              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1609              		.loc 1 218 24 is_stmt 0 view .LVU472
 1610 071c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp333,
 1611              	.LVL104:
 1612              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1613              		.loc 1 234 39 view .LVU473
 1614 0720 3C0095E5 		ldr	r0, [r5, #60]	@ tmp377, g_armwave_state.target_width
 1615              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1616              		.loc 1 222 25 view .LVU474
 1617 0724 FF005EE3 		cmp	lr, #255	@ rr,
 1618              	@ armwave.c:231:                     xx = nsub & 0xff;
 231:armwave.c     ****                     yy = nsub >> 8;
 1619              		.loc 1 231 24 view .LVU475
 1620 0728 7780EFE6 		uxtb	r8, r7	@ xx, _66
 1621              	.LVL105:
 1622              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1623              		.loc 1 227 56 view .LVU476
 1624 072c 0664A0E1 		lsl	r6, r6, #8	@ tmp328, gg,
 1625              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1626              		.loc 1 227 44 view .LVU477
 1627 0730 0448A0E1 		lsl	r4, r4, #16	@ tmp324, bb,
 1628              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1629              		.loc 1 222 25 view .LVU478
 1630 0734 FFE0A0A3 		movge	lr, #255	@ rr,
 1631              	.LVL106:
 1632              	@ armwave.c:232:                     yy = nsub >> 8;
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1633              		.loc 1 232 31 view .LVU479
 1634 0738 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 1635              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1636              		.loc 1 234 39 view .LVU480
 1637 073c 907827E0 		mla	r7, r0, r8, r7	@ tmp321, tmp377, xx, yy
 1638              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1639              		.loc 1 227 44 view .LVU481
 1640 0740 FF4804E2 		and	r4, r4, #16711680	@ tmp325, tmp324,
 1641              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1642              		.loc 1 227 56 view .LVU482
 1643 0744 7660FFE6 		uxth	r6, r6	@ tmp329, tmp328
 1644              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1645              		.loc 1 227 51 view .LVU483
 1646 0748 066084E1 		orr	r6, r4, r6	@ tmp331, tmp325, tmp329
 1647              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1648              		.loc 1 227 62 view .LVU484
 1649 074c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1650              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1651              		.loc 1 234 49 view .LVU485
 1652 0750 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1653              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1654              		.loc 1 227 62 view .LVU486
 1655 0754 0EE086E1 		orr	lr, r6, lr	@ tmp335, tmp331, rr
 1656              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1657              		.loc 1 227 26 view .LVU487
 1658 0758 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp335,
 1659              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1660              		.loc 1 234 49 view .LVU488
 1661 075c 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 1662              	.L83:
 1663              	.LVL107:
 214:armwave.c     ****                 wave_word >>= 8;
 1664              		.loc 1 214 17 is_stmt 1 view .LVU489
 215:armwave.c     **** 
 1665              		.loc 1 215 17 view .LVU490
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1666              		.loc 1 217 17 view .LVU491
 1667              	@ armwave.c:217:                 if(value != 0) {
 217:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1668              		.loc 1 217 19 is_stmt 0 view .LVU492
 1669 0760 000052E3 		cmp	r2, #0	@ wave_word,
 1670 0764 9DFFFF0A 		beq	.L80		@,
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1671              		.loc 1 218 21 is_stmt 1 view .LVU493
 1672              	.LVL108:
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1673              		.loc 1 219 21 view .LVU494
 220:armwave.c     **** 
 1674              		.loc 1 220 21 view .LVU495
 222:armwave.c     ****                     g = MIN(gg, 255);
 1675              		.loc 1 222 21 view .LVU496
 223:armwave.c     ****                     b = MIN(bb, 255);
 1676              		.loc 1 223 21 view .LVU497
 224:armwave.c     **** 
 1677              		.loc 1 224 21 view .LVU498
 227:armwave.c     **** 
 1678              		.loc 1 227 21 view .LVU499
 230:armwave.c     ****                     xx = nsub & 0xff;
 1679              		.loc 1 230 21 view .LVU500
 1680              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1681              		.loc 1 220 55 is_stmt 0 view .LVU501
 1682 0768 920B0EE0 		mul	lr, r2, fp	@ tmp344, wave_word, _80
 1683              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1684              		.loc 1 219 55 view .LVU502
 1685 076c 920904E0 		mul	r4, r2, r9	@ tmp348, wave_word, _76
 1686              	@ armwave.c:220:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 220:armwave.c     **** 
 1687              		.loc 1 220 24 view .LVU503
 1688 0770 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp344,
 1689              	.LVL109:
 1690              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1691              		.loc 1 218 55 view .LVU504
 1692 0774 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _70
 1693              	.LVL110:
 1694              	@ armwave.c:224:                     b = MIN(bb, 255);
 224:armwave.c     **** 
 1695              		.loc 1 224 25 view .LVU505
 1696 0778 FF005EE3 		cmp	lr, #255	@ bb,
 1697              	@ armwave.c:219:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 219:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1698              		.loc 1 219 24 view .LVU506
 1699 077c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp348,
 1700              	.LVL111:
 1701              	@ armwave.c:224:                     b = MIN(bb, 255);
 224:armwave.c     **** 
 1702              		.loc 1 224 25 view .LVU507
 1703 0780 FFE0A0A3 		movge	lr, #255	@ bb,
 1704              	.LVL112:
 1705              	@ armwave.c:223:                     g = MIN(gg, 255);
 223:armwave.c     ****                     b = MIN(bb, 255);
 1706              		.loc 1 223 25 view .LVU508
 1707 0784 FF0054E3 		cmp	r4, #255	@ gg,
 1708 0788 FF40A0A3 		movge	r4, #255	@ gg,
 1709              	.LVL113:
 223:armwave.c     ****                     b = MIN(bb, 255);
 1710              		.loc 1 223 25 view .LVU509
 1711 078c 036083E2 		add	r6, r3, #3	@ _59, n,
 231:armwave.c     ****                     yy = nsub >> 8;
 1712              		.loc 1 231 21 is_stmt 1 view .LVU510
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1713              		.loc 1 232 21 view .LVU511
 233:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1714              		.loc 1 233 21 view .LVU512
 234:armwave.c     ****                 }
 1715              		.loc 1 234 21 view .LVU513
 1716              	@ armwave.c:218:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 218:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1717              		.loc 1 218 24 is_stmt 0 view .LVU514
 1718 0790 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 1719              	.LVL114:
 1720              	@ armwave.c:233:                     offset = yy + (xx * g_armwave_state.target_width);
 233:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1721              		.loc 1 233 39 view .LVU515
 1722 0794 3C7095E5 		ldr	r7, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1723              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1724              		.loc 1 222 25 view .LVU516
 1725 0798 FF0052E3 		cmp	r2, #255	@ rr,
 1726              	@ armwave.c:231:                     xx = nsub & 0xff;
 231:armwave.c     ****                     yy = nsub >> 8;
 1727              		.loc 1 231 24 view .LVU517
 1728 079c 7680EFE6 		uxtb	r8, r6	@ xx, _59
 1729              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1730              		.loc 1 227 56 view .LVU518
 1731 07a0 0444A0E1 		lsl	r4, r4, #8	@ tmp349, gg,
 1732              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1733              		.loc 1 227 44 view .LVU519
 1734 07a4 0EE8A0E1 		lsl	lr, lr, #16	@ tmp345, bb,
 1735              	@ armwave.c:222:                     r = MIN(rr, 255);
 222:armwave.c     ****                     g = MIN(gg, 255);
 1736              		.loc 1 222 25 view .LVU520
 1737 07a8 FF20A0A3 		movge	r2, #255	@ rr,
 1738              	.LVL115:
 1739              	@ armwave.c:232:                     yy = nsub >> 8;
 232:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1740              		.loc 1 232 31 view .LVU521
 1741 07ac 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 1742              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1743              		.loc 1 227 44 view .LVU522
 1744 07b0 FFE80EE2 		and	lr, lr, #16711680	@ tmp346, tmp345,
 1745              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1746              		.loc 1 227 56 view .LVU523
 1747 07b4 7440FFE6 		uxth	r4, r4	@ tmp350, tmp349
 1748              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1749              		.loc 1 234 39 view .LVU524
 1750 07b8 976826E0 		mla	r6, r7, r8, r6	@ tmp342, g_armwave_state.target_width, xx, yy
 1751              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1752              		.loc 1 227 51 view .LVU525
 1753 07bc 04E08EE1 		orr	lr, lr, r4	@ tmp352, tmp346, tmp350
 1754              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1755              		.loc 1 227 62 view .LVU526
 1756 07c0 7220EFE6 		uxtb	r2, r2	@ rr, rr
 1757              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1758              		.loc 1 234 49 view .LVU527
 1759 07c4 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1760              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1761              		.loc 1 227 62 view .LVU528
 1762 07c8 02208EE1 		orr	r2, lr, r2	@ tmp356, tmp352, rr
 1763              	@ armwave.c:227:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 227:armwave.c     **** 
 1764              		.loc 1 227 26 view .LVU529
 1765 07cc FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 1766              	@ armwave.c:234:                     *(out_buffer_base + offset) = word;
 234:armwave.c     ****                 }
 1767              		.loc 1 234 49 view .LVU530
 1768 07d0 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 1769 07d4 81FFFFEA 		b	.L80		@
 1770              	.LVL116:
 1771              	.L101:
 200:armwave.c     **** 
 1772              		.loc 1 200 5 is_stmt 1 discriminator 1 view .LVU531
 1773 07d8 10309FE5 		ldr	r3, .L103+4	@,
 1774 07dc C820A0E3 		mov	r2, #200	@,
 1775 07e0 0C109FE5 		ldr	r1, .L103+8	@,
 1776              	.LVL117:
 200:armwave.c     **** 
 1777              		.loc 1 200 5 is_stmt 0 discriminator 1 view .LVU532
 1778 07e4 0C009FE5 		ldr	r0, .L103+12	@,
 1779              	.LVL118:
 200:armwave.c     **** 
 1780              		.loc 1 200 5 discriminator 1 view .LVU533
 1781 07e8 FEFFFFEB 		bl	__assert_fail		@
 1782              	.LVL119:
 1783              	.L104:
 200:armwave.c     **** 
 1784              		.loc 1 200 5 discriminator 1 view .LVU534
 1785              		.align	2
 1786              	.L103:
 1787 07ec 00000000 		.word	g_armwave_state
 1788 07f0 18000000 		.word	.LANCHOR0+24
 1789 07f4 00000000 		.word	.LC0
 1790 07f8 E8000000 		.word	.LC6
 1791              		.cfi_endproc
 1792              	.LFE63:
 1794              		.align	2
 1795              		.global	armwave_fill_pixbuf_scaled
 1796              		.syntax unified
 1797              		.arm
 1798              		.fpu vfp
 1800              	armwave_fill_pixbuf_scaled:
 1801              	.LVL120:
 1802              	.LFB64:
 240:armwave.c     **** 
 241:armwave.c     **** /*
 242:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 243:armwave.c     ****  * Rows are repeated as necessary.
 244:armwave.c     ****  */
 245:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 246:armwave.c     **** {
 1803              		.loc 1 246 1 is_stmt 1 view -0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 8
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 247:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1807              		.loc 1 247 5 view .LVU536
 248:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 1808              		.loc 1 248 5 view .LVU537
 249:armwave.c     ****     uint8_t r, g, b, value, row;
 1809              		.loc 1 249 5 view .LVU538
 250:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1810              		.loc 1 250 5 view .LVU539
 1811              	@ armwave.c:246: {
 246:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1812              		.loc 1 246 1 is_stmt 0 view .LVU540
 1813 07fc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1814              		.cfi_def_cfa_offset 36
 1815              		.cfi_offset 4, -36
 1816              		.cfi_offset 5, -32
 1817              		.cfi_offset 6, -28
 1818              		.cfi_offset 7, -24
 1819              		.cfi_offset 8, -20
 1820              		.cfi_offset 9, -16
 1821              		.cfi_offset 10, -12
 1822              		.cfi_offset 11, -8
 1823              		.cfi_offset 14, -4
 1824              	@ armwave.c:254:     assert(out_buffer != NULL);
 251:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 252:armwave.c     ****     uint32_t offset;
 253:armwave.c     **** 
 254:armwave.c     ****     assert(out_buffer != NULL);
 1825              		.loc 1 254 5 view .LVU541
 1826 0800 000050E3 		cmp	r0, #0	@ out_buffer
 1827              	@ armwave.c:250:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 250:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1828              		.loc 1 250 15 view .LVU542
 1829 0804 34519FE5 		ldr	r5, .L130	@ tmp202,
 1830              	@ armwave.c:246: {
 246:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1831              		.loc 1 246 1 view .LVU543
 1832 0808 0CD04DE2 		sub	sp, sp, #12	@,,
 1833              		.cfi_def_cfa_offset 48
 1834              	@ armwave.c:250:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 250:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1835              		.loc 1 250 15 view .LVU544
 1836 080c 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1837              	.LVL121:
 251:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1838              		.loc 1 251 5 is_stmt 1 view .LVU545
 252:armwave.c     **** 
 1839              		.loc 1 252 5 view .LVU546
 1840              		.loc 1 254 5 view .LVU547
 1841 0810 4500000A 		beq	.L127		@,
 255:armwave.c     **** 
 256:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1842              		.loc 1 256 5 view .LVU548
 1843              	@ armwave.c:256:     npix = g_armwave_state.target_width * 256; 
 1844              		.loc 1 256 41 is_stmt 0 view .LVU549
 1845 0814 3C8095E5 		ldr	r8, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1846 0818 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1847              	.LVL122:
 257:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1848              		.loc 1 257 5 is_stmt 1 view .LVU550
 258:armwave.c     **** 
 259:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1849              		.loc 1 259 5 view .LVU551
 1850              		.loc 1 259 5 is_stmt 0 view .LVU552
 1851 081c 000058E3 		cmp	r8, #0	@ npix,
 1852 0820 0B0000DA 		ble	.L105		@,
 1853              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 260:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 261:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 262:armwave.c     ****         // most normal waveforms.
 263:armwave.c     ****         wave_word = *base_32ptr++;
 264:armwave.c     **** 
 265:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 266:armwave.c     ****             for(w = 0; w < 4; w++) {
 267:armwave.c     ****                 value = wave_word & 0xff;
 268:armwave.c     ****                 wave_word >>= 8;
 269:armwave.c     **** 
 270:armwave.c     ****                 if(value != 0) {
 271:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 272:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1854              		.loc 1 272 52 view .LVU553
 1855 0824 F235D5E1 		ldrsh	r3, [r5, #82]	@ _11, g_armwave_state.ch1_color.g
 1856              	@ armwave.c:271:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1857              		.loc 1 271 52 view .LVU554
 1858 0828 F0B5D5E1 		ldrsh	fp, [r5, #80]	@ _7, g_armwave_state.ch1_color.r
 1859              	@ armwave.c:259:     for(n = 0; n < npix; n += 4) {
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1860              		.loc 1 259 11 view .LVU555
 1861 082c 00E0A0E3 		mov	lr, #0	@ n,
 1862              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1863              		.loc 1 272 52 view .LVU556
 1864 0830 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1865              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1866              		.loc 1 273 52 view .LVU557
 1867 0834 F435D5E1 		ldrsh	r3, [r5, #84]	@ _14, g_armwave_state.ch1_color.b
 1868 0838 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1869              	.LVL123:
 1870              	.L112:
 263:armwave.c     **** 
 1871              		.loc 1 263 9 is_stmt 1 view .LVU558
 1872              	@ armwave.c:263:         wave_word = *base_32ptr++;
 263:armwave.c     **** 
 1873              		.loc 1 263 19 is_stmt 0 view .LVU559
 1874 083c 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1875              	.LVL124:
 265:armwave.c     ****             for(w = 0; w < 4; w++) {
 1876              		.loc 1 265 9 is_stmt 1 view .LVU560
 1877              	@ armwave.c:265:         if(COND_UNLIKELY(wave_word != 0)) {
 265:armwave.c     ****             for(w = 0; w < 4; w++) {
 1878              		.loc 1 265 11 is_stmt 0 view .LVU561
 1879 0840 00005CE3 		cmp	ip, #0	@ wave_word,
 1880 0844 0400001A 		bne	.L128		@,
 1881              	.L108:
 1882              	@ armwave.c:259:     for(n = 0; n < npix; n += 4) {
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1883              		.loc 1 259 28 view .LVU562
 1884 0848 04E08EE2 		add	lr, lr, #4	@ n, n,
 1885              	.LVL125:
 1886              	@ armwave.c:259:     for(n = 0; n < npix; n += 4) {
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1887              		.loc 1 259 5 view .LVU563
 1888 084c 0E0058E1 		cmp	r8, lr	@ npix, n
 1889 0850 F9FFFFCA 		bgt	.L112		@,
 1890              	.LVL126:
 1891              	.L105:
 1892              	@ armwave.c:295: }
 274:armwave.c     **** 
 275:armwave.c     ****                     r = MIN(rr, 255);
 276:armwave.c     ****                     g = MIN(gg, 255);
 277:armwave.c     ****                     b = MIN(bb, 255);
 278:armwave.c     **** 
 279:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 280:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 281:armwave.c     **** 
 282:armwave.c     ****                     // Do line scaling as necessary.
 283:armwave.c     ****                     nsub = n + w;
 284:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 285:armwave.c     ****                     xx = (nsub >> 8);
 286:armwave.c     **** 
 287:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 288:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 289:armwave.c     ****                         *(out_buffer_base + offset) = word;
 290:armwave.c     ****                     }
 291:armwave.c     ****                 }
 292:armwave.c     ****             }
 293:armwave.c     ****         }
 294:armwave.c     ****     }
 295:armwave.c     **** }
 1893              		.loc 1 295 1 view .LVU564
 1894 0854 0CD08DE2 		add	sp, sp, #12	@,,
 1895              		.cfi_remember_state
 1896              		.cfi_def_cfa_offset 36
 1897              		@ sp needed	@
 1898 0858 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1899              	.LVL127:
 1900              	.L128:
 1901              		.cfi_restore_state
 1902              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1903              		.loc 1 270 19 view .LVU565
 1904 085c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1905              	@ armwave.c:266:             for(w = 0; w < 4; w++) {
 266:armwave.c     ****                 value = wave_word & 0xff;
 1906              		.loc 1 266 19 view .LVU566
 1907 0860 0090A0E3 		mov	r9, #0	@ w,
 1908              	.LVL128:
 267:armwave.c     ****                 wave_word >>= 8;
 1909              		.loc 1 267 17 is_stmt 1 view .LVU567
 268:armwave.c     **** 
 1910              		.loc 1 268 17 view .LVU568
 1911              	@ armwave.c:268:                 wave_word >>= 8;
 268:armwave.c     **** 
 1912              		.loc 1 268 27 is_stmt 0 view .LVU569
 1913 0864 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1914              	.LVL129:
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1915              		.loc 1 270 17 is_stmt 1 view .LVU570
 1916              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1917              		.loc 1 270 19 is_stmt 0 view .LVU571
 1918 0868 0500001A 		bne	.L129		@,
 1919              	.L109:
 1920              	@ armwave.c:266:             for(w = 0; w < 4; w++) {
 266:armwave.c     ****                 value = wave_word & 0xff;
 1921              		.loc 1 266 32 view .LVU572
 1922 086c 019089E2 		add	r9, r9, #1	@ w, w,
 1923              	.LVL130:
 1924              	@ armwave.c:266:             for(w = 0; w < 4; w++) {
 266:armwave.c     ****                 value = wave_word & 0xff;
 1925              		.loc 1 266 13 view .LVU573
 1926 0870 040059E3 		cmp	r9, #4	@ w,
 1927 0874 F3FFFF0A 		beq	.L108		@,
 267:armwave.c     ****                 wave_word >>= 8;
 1928              		.loc 1 267 17 is_stmt 1 view .LVU574
 1929              	.LVL131:
 268:armwave.c     **** 
 1930              		.loc 1 268 17 view .LVU575
 1931              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1932              		.loc 1 270 19 is_stmt 0 view .LVU576
 1933 0878 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1934              	@ armwave.c:268:                 wave_word >>= 8;
 268:armwave.c     **** 
 1935              		.loc 1 268 27 view .LVU577
 1936 087c 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1937              	.LVL132:
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1938              		.loc 1 270 17 is_stmt 1 view .LVU578
 1939              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1940              		.loc 1 270 19 is_stmt 0 view .LVU579
 1941 0880 F9FFFF0A 		beq	.L109		@,
 1942              	.L129:
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1943              		.loc 1 271 21 is_stmt 1 view .LVU580
 1944              	.LVL133:
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1945              		.loc 1 272 21 view .LVU581
 273:armwave.c     **** 
 1946              		.loc 1 273 21 view .LVU582
 275:armwave.c     ****                     g = MIN(gg, 255);
 1947              		.loc 1 275 21 view .LVU583
 276:armwave.c     ****                     b = MIN(bb, 255);
 1948              		.loc 1 276 21 view .LVU584
 277:armwave.c     **** 
 1949              		.loc 1 277 21 view .LVU585
 280:armwave.c     **** 
 1950              		.loc 1 280 21 view .LVU586
 1951              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     **** 
 1952              		.loc 1 273 55 is_stmt 0 view .LVU587
 1953 0884 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1954              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1955              		.loc 1 272 55 view .LVU588
 1956 0888 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1957 088c 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1958              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     **** 
 1959              		.loc 1 273 55 view .LVU589
 1960 0890 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1961              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1962              		.loc 1 272 55 view .LVU590
 1963 0894 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1964              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     **** 
 1965              		.loc 1 273 24 view .LVU591
 1966 0898 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1967              	.LVL134:
 1968              	@ armwave.c:271:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1969              		.loc 1 271 55 view .LVU592
 1970 089c 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1971              	.LVL135:
 1972              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1973              		.loc 1 272 24 view .LVU593
 1974 08a0 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1975              	.LVL136:
 1976              	@ armwave.c:277:                     b = MIN(bb, 255);
 277:armwave.c     **** 
 1977              		.loc 1 277 25 view .LVU594
 1978 08a4 FF0052E3 		cmp	r2, #255	@ bb,
 1979 08a8 FF20A0A3 		movge	r2, #255	@ bb,
 1980              	.LVL137:
 1981              	@ armwave.c:276:                     g = MIN(gg, 255);
 276:armwave.c     ****                     b = MIN(bb, 255);
 1982              		.loc 1 276 25 view .LVU595
 1983 08ac FF0051E3 		cmp	r1, #255	@ gg,
 1984 08b0 FF10A0A3 		movge	r1, #255	@ gg,
 1985              	.LVL138:
 1986              	@ armwave.c:271:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1987              		.loc 1 271 24 view .LVU596
 1988 08b4 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1989              	.LVL139:
 1990              	@ armwave.c:275:                     r = MIN(rr, 255);
 275:armwave.c     ****                     g = MIN(gg, 255);
 1991              		.loc 1 275 25 view .LVU597
 1992 08b8 FF0053E3 		cmp	r3, #255	@ rr,
 1993              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 1994              		.loc 1 280 56 view .LVU598
 1995 08bc 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1996              	@ armwave.c:275:                     r = MIN(rr, 255);
 275:armwave.c     ****                     g = MIN(gg, 255);
 1997              		.loc 1 275 25 view .LVU599
 1998 08c0 FF30A0A3 		movge	r3, #255	@ rr,
 1999              	.LVL140:
 2000              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2001              		.loc 1 280 44 view .LVU600
 2002 08c4 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 2003              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2004              		.loc 1 280 56 view .LVU601
 2005 08c8 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 2006              	@ armwave.c:284:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 284:armwave.c     ****                     xx = (nsub >> 8);
 2007              		.loc 1 284 57 view .LVU602
 2008 08cc 1CA095E5 		ldr	r10, [r5, #28]	@ _28, g_armwave_state.vscale
 2009              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2010              		.loc 1 280 44 view .LVU603
 2011 08d0 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 2012              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2013              		.loc 1 280 51 view .LVU604
 2014 08d4 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 2015              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2016              		.loc 1 280 62 view .LVU605
 2017 08d8 7330EFE6 		uxtb	r3, r3	@ rr, rr
 2018              	@ armwave.c:284:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 284:armwave.c     ****                     xx = (nsub >> 8);
 2019              		.loc 1 284 32 view .LVU606
 2020 08dc 7710EFE6 		uxtb	r1, r7	@ _113, _113
 2021              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2022              		.loc 1 280 62 view .LVU607
 2023 08e0 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 2024              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2025              		.loc 1 287 21 view .LVU608
 2026 08e4 00005AE3 		cmp	r10, #0	@ _28,
 2027              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2028              		.loc 1 280 26 view .LVU609
 2029 08e8 FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 2030              	.LVL141:
 283:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2031              		.loc 1 283 21 is_stmt 1 view .LVU610
 284:armwave.c     ****                     xx = (nsub >> 8);
 2032              		.loc 1 284 21 view .LVU611
 2033              	@ armwave.c:285:                     xx = (nsub >> 8);
 285:armwave.c     **** 
 2034              		.loc 1 285 32 is_stmt 0 view .LVU612
 2035 08ec 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 2036              	.LVL142:
 2037              	@ armwave.c:284:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 284:armwave.c     ****                     xx = (nsub >> 8);
 2038              		.loc 1 284 24 view .LVU613
 2039 08f0 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 2040              	.LVL143:
 285:armwave.c     **** 
 2041              		.loc 1 285 21 is_stmt 1 view .LVU614
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2042              		.loc 1 287 21 view .LVU615
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2043              		.loc 1 287 21 is_stmt 0 view .LVU616
 2044 08f4 DCFFFF0A 		beq	.L109		@,
 2045              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2046              		.loc 1 287 29 view .LVU617
 2047 08f8 0030A0E3 		mov	r3, #0	@ row,
 2048              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2049              		.loc 1 287 38 view .LVU618
 2050 08fc 0320A0E1 		mov	r2, r3	@ _35, row
 2051              	.LVL144:
 2052              	.L110:
 288:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2053              		.loc 1 288 25 is_stmt 1 discriminator 3 view .LVU619
 289:armwave.c     ****                     }
 2054              		.loc 1 289 25 discriminator 3 view .LVU620
 2055              	@ armwave.c:288:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 288:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2056              		.loc 1 288 52 is_stmt 0 discriminator 3 view .LVU621
 2057 0900 3C1095E5 		ldr	r1, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2058              	@ armwave.c:288:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 288:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2059              		.loc 1 288 45 discriminator 3 view .LVU622
 2060 0904 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 2061              	.LVL145:
 2062              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2063              		.loc 1 287 67 discriminator 3 view .LVU623
 2064 0908 013083E2 		add	r3, r3, #1	@ tmp199, row,
 2065              	.LVL146:
 2066              	@ armwave.c:289:                         *(out_buffer_base + offset) = word;
 289:armwave.c     ****                     }
 2067              		.loc 1 289 43 discriminator 3 view .LVU624
 2068 090c 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 2069              	.LVL147:
 2070              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2071              		.loc 1 287 67 discriminator 3 view .LVU625
 2072 0910 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 2073              	.LVL148:
 2074              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2075              		.loc 1 287 38 discriminator 3 view .LVU626
 2076 0914 0320A0E1 		mov	r2, r3	@ _35, row
 2077              	@ armwave.c:289:                         *(out_buffer_base + offset) = word;
 289:armwave.c     ****                     }
 2078              		.loc 1 289 53 discriminator 3 view .LVU627
 2079 0918 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 2080              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2081              		.loc 1 287 21 discriminator 3 view .LVU628
 2082 091c 1C1095E5 		ldr	r1, [r5, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2083              	.LVL149:
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2084              		.loc 1 287 21 discriminator 3 view .LVU629
 2085 0920 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 2086 0924 F5FFFF3A 		bcc	.L110		@,
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2087              		.loc 1 287 21 discriminator 3 view .LVU630
 2088 0928 CFFFFFEA 		b	.L109		@
 2089              	.LVL150:
 2090              	.L127:
 254:armwave.c     **** 
 2091              		.loc 1 254 5 is_stmt 1 discriminator 1 view .LVU631
 2092 092c 10309FE5 		ldr	r3, .L130+4	@,
 2093 0930 FE20A0E3 		mov	r2, #254	@,
 2094 0934 0C109FE5 		ldr	r1, .L130+8	@,
 2095 0938 0C009FE5 		ldr	r0, .L130+12	@,
 2096              	.LVL151:
 254:armwave.c     **** 
 2097              		.loc 1 254 5 is_stmt 0 discriminator 1 view .LVU632
 2098 093c FEFFFFEB 		bl	__assert_fail		@
 2099              	.LVL152:
 2100              	.L131:
 2101              		.align	2
 2102              	.L130:
 2103 0940 00000000 		.word	g_armwave_state
 2104 0944 30000000 		.word	.LANCHOR0+48
 2105 0948 00000000 		.word	.LC0
 2106 094c E8000000 		.word	.LC6
 2107              		.cfi_endproc
 2108              	.LFE64:
 2110              		.align	2
 2111              		.global	armwave_dump_ppm_debug
 2112              		.syntax unified
 2113              		.arm
 2114              		.fpu vfp
 2116              	armwave_dump_ppm_debug:
 2117              	.LVL153:
 2118              	.LFB65:
 296:armwave.c     **** 
 297:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 298:armwave.c     **** {
 2119              		.loc 1 298 1 is_stmt 1 view -0
 2120              		.cfi_startproc
 2121              		@ args = 0, pretend = 0, frame = 0
 2122              		@ frame_needed = 0, uses_anonymous_args = 0
 299:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2123              		.loc 1 299 5 view .LVU634
 2124              	@ armwave.c:298: {
 298:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2125              		.loc 1 298 1 is_stmt 0 view .LVU635
 2126 0950 0130A0E1 		mov	r3, r1	@ fn, fn
 2127 0954 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2128              		.cfi_def_cfa_offset 28
 2129              		.cfi_offset 4, -28
 2130              		.cfi_offset 5, -24
 2131              		.cfi_offset 6, -20
 2132              		.cfi_offset 7, -16
 2133              		.cfi_offset 8, -12
 2134              		.cfi_offset 9, -8
 2135              		.cfi_offset 14, -4
 2136 0958 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2137 095c 0CD04DE2 		sub	sp, sp, #12	@,,
 2138              		.cfi_def_cfa_offset 40
 2139              	@ armwave.c:299:     FILE *fp = fopen(fn, "wb");
 2140              		.loc 1 299 16 view .LVU636
 2141 0960 D8109FE5 		ldr	r1, .L144	@,
 2142              	.LVL154:
 2143              		.loc 1 299 16 view .LVU637
 2144 0964 0300A0E1 		mov	r0, r3	@, fn
 2145              	.LVL155:
 2146              		.loc 1 299 16 view .LVU638
 2147 0968 FEFFFFEB 		bl	fopen64		@
 2148              	.LVL156:
 2149              	@ armwave.c:306:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 300:armwave.c     ****     uint32_t data;
 301:armwave.c     ****     int xx, yy;
 302:armwave.c     **** 
 303:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 304:armwave.c     **** 
 305:armwave.c     ****     fputs("P3\n", fp);
 306:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2150              		.loc 1 306 5 view .LVU639
 2151 096c D0609FE5 		ldr	r6, .L144+4	@ tmp154,
 2152              	@ armwave.c:305:     fputs("P3\n", fp);
 305:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2153              		.loc 1 305 5 view .LVU640
 2154 0970 0320A0E3 		mov	r2, #3	@,
 2155 0974 0110A0E3 		mov	r1, #1	@,
 2156              	@ armwave.c:299:     FILE *fp = fopen(fn, "wb");
 299:armwave.c     ****     uint32_t data;
 2157              		.loc 1 299 16 view .LVU641
 2158 0978 0070A0E1 		mov	r7, r0	@ fp,
 2159              	.LVL157:
 300:armwave.c     ****     uint32_t data;
 2160              		.loc 1 300 5 is_stmt 1 view .LVU642
 301:armwave.c     **** 
 2161              		.loc 1 301 5 view .LVU643
 305:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2162              		.loc 1 305 5 view .LVU644
 2163 097c 0030A0E1 		mov	r3, r0	@, fp
 2164 0980 C0009FE5 		ldr	r0, .L144+8	@,
 2165              	.LVL158:
 305:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2166              		.loc 1 305 5 is_stmt 0 view .LVU645
 2167 0984 FEFFFFEB 		bl	fwrite		@
 2168              	.LVL159:
 2169              		.loc 1 306 5 is_stmt 1 view .LVU646
 2170 0988 3C3096E5 		ldr	r3, [r6, #60]	@, g_armwave_state.target_width
 2171 098c 402096E5 		ldr	r2, [r6, #64]	@, g_armwave_state.target_height
 2172 0990 B4109FE5 		ldr	r1, .L144+12	@,
 2173 0994 0700A0E1 		mov	r0, r7	@, fp
 2174 0998 FEFFFFEB 		bl	fprintf		@
 2175              	.LVL160:
 307:armwave.c     ****     fputs("255\n", fp);
 2176              		.loc 1 307 5 view .LVU647
 2177 099c 0420A0E3 		mov	r2, #4	@,
 2178 09a0 0730A0E1 		mov	r3, r7	@, fp
 2179 09a4 0110A0E3 		mov	r1, #1	@,
 2180 09a8 A0009FE5 		ldr	r0, .L144+16	@,
 2181 09ac FEFFFFEB 		bl	fwrite		@
 2182              	.LVL161:
 308:armwave.c     **** 
 309:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2183              		.loc 1 309 5 view .LVU648
 2184              	@ armwave.c:309:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2185              		.loc 1 309 37 is_stmt 0 view .LVU649
 2186 09b0 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2187              	@ armwave.c:309:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2188              		.loc 1 309 5 view .LVU650
 2189 09b4 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2190 09b8 1800000A 		beq	.L133		@,
 2191 09bc 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2192              	@ armwave.c:314:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 310:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 311:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 312:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 313:armwave.c     **** 
 314:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2193              		.loc 1 314 13 view .LVU651
 2194 09c0 8C909FE5 		ldr	r9, .L144+20	@ tmp156,
 2195              	@ armwave.c:309:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 309:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2196              		.loc 1 309 12 view .LVU652
 2197 09c4 0050A0E3 		mov	r5, #0	@ yy,
 2198              	.LVL162:
 2199              	.L134:
 2200              	@ armwave.c:310:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 310:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2201              		.loc 1 310 9 view .LVU653
 2202 09c8 000053E3 		cmp	r3, #0	@ _12,
 2203              	@ armwave.c:310:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 310:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2204              		.loc 1 310 16 view .LVU654
 2205 09cc 0040A013 		movne	r4, #0	@ xx,
 2206              	@ armwave.c:310:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 310:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2207              		.loc 1 310 9 view .LVU655
 2208 09d0 1600000A 		beq	.L143		@,
 2209              	.LVL163:
 2210              	.L135:
 311:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2211              		.loc 1 311 13 is_stmt 1 discriminator 3 view .LVU656
 2212              	@ armwave.c:311:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 311:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2213              		.loc 1 311 29 is_stmt 0 discriminator 3 view .LVU657
 2214 09d4 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2215              	@ armwave.c:314:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2216              		.loc 1 314 13 discriminator 3 view .LVU658
 2217 09d8 0910A0E1 		mov	r1, r9	@, tmp156
 2218 09dc 0700A0E1 		mov	r0, r7	@, fp
 2219              	@ armwave.c:311:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 311:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2220              		.loc 1 311 18 discriminator 3 view .LVU659
 2221 09e0 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2222              	.LVL164:
 2223              		.loc 1 314 13 is_stmt 1 discriminator 3 view .LVU660
 2224              	@ armwave.c:310:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 310:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2225              		.loc 1 310 58 is_stmt 0 discriminator 3 view .LVU661
 2226 09e4 014084E2 		add	r4, r4, #1	@ xx, xx,
 2227              	.LVL165:
 2228              	@ armwave.c:314:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2229              		.loc 1 314 81 discriminator 3 view .LVU662
 2230 09e8 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2231              	@ armwave.c:314:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2232              		.loc 1 314 61 discriminator 3 view .LVU663
 2233 09ec 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2234              	@ armwave.c:314:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2235              		.loc 1 314 13 discriminator 3 view .LVU664
 2236 09f0 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2237 09f4 7330EFE6 		uxtb	r3, r3	@, tmp146
 2238 09f8 00C08DE5 		str	ip, [sp]	@ tmp151,
 2239 09fc 7220EFE6 		uxtb	r2, r2	@, data
 2240              	.LVL166:
 2241              		.loc 1 314 13 discriminator 3 view .LVU665
 2242 0a00 FEFFFFEB 		bl	fprintf		@
 2243              	.LVL167:
 2244              	@ armwave.c:310:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 310:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2245              		.loc 1 310 41 discriminator 3 view .LVU666
 2246 0a04 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2247              	@ armwave.c:310:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 310:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2248              		.loc 1 310 9 discriminator 3 view .LVU667
 2249 0a08 040053E1 		cmp	r3, r4	@ _12, xx
 2250 0a0c F0FFFF8A 		bhi	.L135		@,
 2251 0a10 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2252              	.LVL168:
 2253              	.L136:
 2254              	@ armwave.c:309:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 309:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2255              		.loc 1 309 55 discriminator 2 view .LVU668
 2256 0a14 015085E2 		add	r5, r5, #1	@ yy, yy,
 2257              	.LVL169:
 2258              	@ armwave.c:309:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 309:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2259              		.loc 1 309 5 discriminator 2 view .LVU669
 2260 0a18 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2261 0a1c E9FFFF3A 		bcc	.L134		@,
 2262              	.LVL170:
 2263              	.L133:
 315:armwave.c     ****         }
 316:armwave.c     ****     }
 317:armwave.c     **** 
 318:armwave.c     ****     fclose(fp);
 2264              		.loc 1 318 5 is_stmt 1 view .LVU670
 2265 0a20 0700A0E1 		mov	r0, r7	@, fp
 2266              	@ armwave.c:319: }
 319:armwave.c     **** }
 2267              		.loc 1 319 1 is_stmt 0 view .LVU671
 2268 0a24 0CD08DE2 		add	sp, sp, #12	@,,
 2269              		.cfi_remember_state
 2270              		.cfi_def_cfa_offset 28
 2271              		@ sp needed	@
 2272 0a28 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2273              		.cfi_restore 14
 2274              		.cfi_restore 9
 2275              		.cfi_restore 8
 2276              		.cfi_restore 7
 2277              		.cfi_restore 6
 2278              		.cfi_restore 5
 2279              		.cfi_restore 4
 2280              		.cfi_def_cfa_offset 0
 2281              	.LVL171:
 2282              	@ armwave.c:318:     fclose(fp);
 318:armwave.c     **** }
 2283              		.loc 1 318 5 view .LVU672
 2284 0a2c FEFFFFEA 		b	fclose		@
 2285              	.LVL172:
 2286              	.L143:
 2287              		.cfi_restore_state
 2288              	@ armwave.c:309:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 309:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2289              		.loc 1 309 55 view .LVU673
 2290 0a30 015085E2 		add	r5, r5, #1	@ yy, yy,
 2291              	.LVL173:
 2292              	@ armwave.c:309:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 309:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2293              		.loc 1 309 5 view .LVU674
 2294 0a34 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2295 0a38 F5FFFF8A 		bhi	.L136		@,
 2296 0a3c F7FFFFEA 		b	.L133		@
 2297              	.L145:
 2298              		.align	2
 2299              	.L144:
 2300 0a40 FC000000 		.word	.LC7
 2301 0a44 00000000 		.word	g_armwave_state
 2302 0a48 00010000 		.word	.LC8
 2303 0a4c 04010000 		.word	.LC9
 2304 0a50 0C010000 		.word	.LC10
 2305 0a54 14010000 		.word	.LC11
 2306              		.cfi_endproc
 2307              	.LFE65:
 2309              		.align	2
 2310              		.global	armwave_test_init
 2311              		.syntax unified
 2312              		.arm
 2313              		.fpu vfp
 2315              	armwave_test_init:
 2316              	.LVL174:
 2317              	.LFB66:
 320:armwave.c     **** 
 321:armwave.c     **** void armwave_test_init(int render_width, int render_height)
 322:armwave.c     **** {
 2318              		.loc 1 322 1 is_stmt 1 view -0
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 0
 2321              		@ frame_needed = 0, uses_anonymous_args = 0
 323:armwave.c     ****     test_create_gamma();
 2322              		.loc 1 323 5 view .LVU676
 2323              	.LBB10:
 2324              	.LBI10:
  45:armwave.c     **** {
 2325              		.loc 1 45 6 view .LVU677
  45:armwave.c     **** {
 2326              		.loc 1 45 6 is_stmt 0 view .LVU678
 2327              	.LBE10:
 2328              	@ armwave.c:322: {
 322:armwave.c     ****     test_create_gamma();
 2329              		.loc 1 322 1 view .LVU679
 2330 0a58 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2331              		.cfi_def_cfa_offset 24
 2332              		.cfi_offset 4, -24
 2333              		.cfi_offset 5, -20
 2334              		.cfi_offset 6, -16
 2335              		.cfi_offset 7, -12
 2336              		.cfi_offset 8, -8
 2337              		.cfi_offset 14, -4
 2338 0a5c 068B2DED 		vpush.64	{d8, d9, d10}	@
 2339              		.cfi_def_cfa_offset 48
 2340              		.cfi_offset 80, -48
 2341              		.cfi_offset 81, -44
 2342              		.cfi_offset 82, -40
 2343              		.cfi_offset 83, -36
 2344              		.cfi_offset 84, -32
 2345              		.cfi_offset 85, -28
 2346 0a60 9C409FE5 		ldr	r4, .L150+20	@ ivtmp.95,
 2347              	.LBB13:
 2348              	.LBB11:
 2349              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2350              		.loc 1 51 32 view .LVU680
 2351 0a64 25AA9FED 		vldr.32	s20, .L150+16	@ tmp132,
 2352              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2353              		.loc 1 51 26 view .LVU681
 2354 0a68 209B9FED 		vldr.64	d9, .L150	@ tmp146,
 2355              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2356              		.loc 1 51 49 view .LVU682
 2357 0a6c 218B9FED 		vldr.64	d8, .L150+8	@ tmp135,
 2358 0a70 013084E2 		add	r3, r4, #1	@ _34, ivtmp.95,
 2359              	.LBE11:
 2360              	.LBE13:
 2361              	@ armwave.c:322: {
 322:armwave.c     ****     test_create_gamma();
 2362              		.loc 1 322 1 view .LVU683
 2363 0a74 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2364 0a78 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2365 0a7c 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.95,
 2366 0a80 015063E2 		rsb	r5, r3, #1	@ tmp145, _34,
 2367              	.LVL175:
 2368              	.L147:
 2369              	.LBB14:
 2370              	.LBB12:
  51:armwave.c     ****     }
 2371              		.loc 1 51 9 is_stmt 1 view .LVU684
 2372              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2373              		.loc 1 51 32 is_stmt 0 view .LVU685
 2374 0a84 043085E0 		add	r3, r5, r4	@ tmp129, tmp145, ivtmp.95
 2375              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2376              		.loc 1 51 26 view .LVU686
 2377 0a88 491BB0EE 		vmov.f64	d1, d9	@, tmp146
 2378              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2379              		.loc 1 51 32 view .LVU687
 2380 0a8c 903A07EE 		vmov	s15, r3	@ int	@ tmp129, tmp129
 2381 0a90 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp130, tmp129
 2382 0a94 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp131, tmp130, tmp132
 2383              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2384              		.loc 1 51 26 view .LVU688
 2385 0a98 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp131
 2386 0a9c FEFFFFEB 		bl	pow		@
 2387              	.LVL176:
 2388              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2389              		.loc 1 51 49 view .LVU689
 2390 0aa0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp134,, tmp135
 2391              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2392              		.loc 1 51 24 view .LVU690
 2393 0aa4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp136, tmp134
 2394 0aa8 903A17EE 		vmov	r3, s15	@ int	@ tmp136, tmp136
 2395 0aac 0130E4E5 		strb	r3, [r4, #1]!	@ tmp136, MEM[base: _33, offset: 0B]
 2396              	.LVL177:
 2397              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2398              		.loc 1 50 5 view .LVU691
 2399 0ab0 080054E1 		cmp	r4, r8	@ ivtmp.95, _35
 2400 0ab4 F2FFFF1A 		bne	.L147		@,
 2401              	.LVL178:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2402              		.loc 1 50 5 view .LVU692
 2403              	.LBE12:
 2404              	.LBE14:
 324:armwave.c     **** 
 325:armwave.c     ****     // make ch1 yellowish by default
 326:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2405              		.loc 1 326 5 is_stmt 1 view .LVU693
 2406              	.LBB15:
 2407              	.LBI15:
 176:armwave.c     **** {
 2408              		.loc 1 176 6 view .LVU694
 2409              	.LBB16:
 179:armwave.c     ****         case 1:
 2410              		.loc 1 179 5 view .LVU695
 181:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2411              		.loc 1 181 13 view .LVU696
 182:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2412              		.loc 1 182 13 view .LVU697
 2413              	@ armwave.c:181:             g_armwave_state.ch1_color.r = r;
 181:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2414              		.loc 1 181 41 is_stmt 0 view .LVU698
 2415 0ab8 48309FE5 		ldr	r3, .L150+24	@ tmp138,
 2416 0abc 48C09FE5 		ldr	ip, .L150+28	@ tmp139,
 2417              	.LBE16:
 2418              	.LBE15:
 2419              	@ armwave.c:328:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 327:armwave.c     **** 
 328:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 2420              		.loc 1 328 5 view .LVU699
 2421 0ac0 0710A0E1 		mov	r1, r7	@, render_height
 2422 0ac4 0600A0E1 		mov	r0, r6	@, render_width
 2423              	.LBB18:
 2424              	.LBB17:
 2425              	@ armwave.c:183:             g_armwave_state.ch1_color.b = b;
 183:armwave.c     ****             break;
 2426              		.loc 1 183 41 view .LVU700
 2427 0ac8 FA20A0E3 		mov	r2, #250	@ tmp142,
 2428              	@ armwave.c:181:             g_armwave_state.ch1_color.r = r;
 181:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2429              		.loc 1 181 41 view .LVU701
 2430 0acc 50C083E5 		str	ip, [r3, #80]	@ tmp139, MEM[(short int *)&g_armwave_state + 80B]
 183:armwave.c     ****             break;
 2431              		.loc 1 183 13 is_stmt 1 view .LVU702
 2432              	@ armwave.c:183:             g_armwave_state.ch1_color.b = b;
 183:armwave.c     ****             break;
 2433              		.loc 1 183 41 is_stmt 0 view .LVU703
 2434 0ad0 B425C3E1 		strh	r2, [r3, #84]	@ movhi	@ tmp142, g_armwave_state.ch1_color.b
 184:armwave.c     ****     }
 2435              		.loc 1 184 13 is_stmt 1 view .LVU704
 2436              	.LVL179:
 184:armwave.c     ****     }
 2437              		.loc 1 184 13 is_stmt 0 view .LVU705
 2438              	.LBE17:
 2439              	.LBE18:
 2440              		.loc 1 328 5 is_stmt 1 view .LVU706
 2441 0ad4 49FDFFEB 		bl	armwave_setup_render.constprop.0		@
 2442              	.LVL180:
 329:armwave.c     **** 
 330:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2443              		.loc 1 330 5 view .LVU707
 2444              	@ armwave.c:331: }
 331:armwave.c     **** }
 2445              		.loc 1 331 1 is_stmt 0 view .LVU708
 2446 0ad8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2447              		.cfi_restore 84
 2448              		.cfi_restore 85
 2449              		.cfi_restore 82
 2450              		.cfi_restore 83
 2451              		.cfi_restore 80
 2452              		.cfi_restore 81
 2453              		.cfi_def_cfa_offset 24
 2454              	@ armwave.c:330:     printf("armwave version: %s\n", ARMWAVE_VER);
 330:armwave.c     **** }
 2455              		.loc 1 330 5 view .LVU709
 2456 0adc 2C109FE5 		ldr	r1, .L150+32	@,
 2457 0ae0 2C009FE5 		ldr	r0, .L150+36	@,
 2458              	@ armwave.c:331: }
 2459              		.loc 1 331 1 view .LVU710
 2460 0ae4 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2461              		.cfi_restore 14
 2462              		.cfi_restore 8
 2463              		.cfi_restore 7
 2464              		.cfi_restore 6
 2465              		.cfi_restore 5
 2466              		.cfi_restore 4
 2467              		.cfi_def_cfa_offset 0
 2468              	.LVL181:
 2469              	@ armwave.c:330:     printf("armwave version: %s\n", ARMWAVE_VER);
 330:armwave.c     **** }
 2470              		.loc 1 330 5 view .LVU711
 2471 0ae8 FEFFFFEA 		b	printf		@
 2472              	.LVL182:
 2473              	.L151:
 2474 0aec 0000A0E1 		.align	3
 2475              	.L150:
 2476 0af0 000000C0 		.word	-1073741824
 2477 0af4 CCCCEC3F 		.word	1072483532
 2478 0af8 00000000 		.word	0
 2479 0afc 00E06F40 		.word	1081073664
 2480 0b00 00007F43 		.word	1132396544
 2481 0b04 FFFFFFFF 		.word	gamma_table-1
 2482 0b08 00000000 		.word	g_armwave_state
 2483 0b0c F609F406 		.word	116656630
 2484 0b10 24010000 		.word	.LC12
 2485 0b14 2C010000 		.word	.LC13
 2486              		.cfi_endproc
 2487              	.LFE66:
 2489              		.global	__aeabi_uidiv
 2490              		.align	2
 2491              		.global	armwave_test_generate
 2492              		.syntax unified
 2493              		.arm
 2494              		.fpu vfp
 2496              	armwave_test_generate:
 2497              	.LFB67:
 332:armwave.c     **** 
 333:armwave.c     **** void armwave_test_generate()
 334:armwave.c     **** {
 2498              		.loc 1 334 1 is_stmt 1 view -0
 2499              		.cfi_startproc
 2500              		@ args = 0, pretend = 0, frame = 0
 2501              		@ frame_needed = 0, uses_anonymous_args = 0
 335:armwave.c     ****     uint32_t yy;
 2502              		.loc 1 335 5 view .LVU713
 336:armwave.c     **** 
 337:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2503              		.loc 1 337 5 view .LVU714
 2504              	@ armwave.c:334: {
 334:armwave.c     ****     uint32_t yy;
 2505              		.loc 1 334 1 is_stmt 0 view .LVU715
 2506 0b18 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2507              		.cfi_def_cfa_offset 40
 2508              		.cfi_offset 3, -40
 2509              		.cfi_offset 4, -36
 2510              		.cfi_offset 5, -32
 2511              		.cfi_offset 6, -28
 2512              		.cfi_offset 7, -24
 2513              		.cfi_offset 8, -20
 2514              		.cfi_offset 9, -16
 2515              		.cfi_offset 10, -12
 2516              		.cfi_offset 11, -8
 2517              		.cfi_offset 14, -4
 2518              	@ armwave.c:337:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2519              		.loc 1 337 5 view .LVU716
 2520 0b1c 0010A0E3 		mov	r1, #0	@,
 2521 0b20 14419FE5 		ldr	r4, .L170	@ tmp255,
 2522 0b24 342094E5 		ldr	r2, [r4, #52]	@, g_armwave_state.ch_buff_size
 2523 0b28 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2524 0b2c FEFFFFEB 		bl	memset		@
 2525              	.LVL183:
 338:armwave.c     **** 
 339:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2526              		.loc 1 339 5 is_stmt 1 view .LVU717
 2527              	@ armwave.c:339:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2528              		.loc 1 339 45 is_stmt 0 view .LVU718
 2529 0b30 2C9094E5 		ldr	r9, [r4, #44]	@ _92, g_armwave_state.slice_height
 2530              	@ armwave.c:339:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2531              		.loc 1 339 5 view .LVU719
 2532 0b34 020B59E3 		cmp	r9, #2048	@ _92,
 2533 0b38 F88FBD88 		pophi	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2534 0b3c 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2535              	@ armwave.c:339:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2536              		.loc 1 339 12 view .LVU720
 2537 0b40 0050A0E3 		mov	r5, #0	@ yy,
 2538              	.LVL184:
 2539              	.L158:
 340:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2540              		.loc 1 340 9 is_stmt 1 discriminator 3 view .LVU721
 2541 0b44 990506E0 		mul	r6, r9, r5	@ _3, _92, yy
 2542              	.LBB21:
 2543              	.LBB22:
 2544              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 2545              		.loc 1 71 63 is_stmt 0 discriminator 3 view .LVU722
 2546 0b48 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2547              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2548              		.loc 1 74 5 discriminator 3 view .LVU723
 2549 0b4c 000058E3 		cmp	r8, #0	@ prephitmp_177,
 2550              	.LBE22:
 2551              	.LBE21:
 2552              	@ armwave.c:340:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2553              		.loc 1 340 9 discriminator 3 view .LVU724
 2554 0b50 307094E5 		ldr	r7, [r4, #48]	@ _4, g_armwave_state.slice_record_height
 2555              	.LVL185:
 2556              	.LBB24:
 2557              	.LBI21:
  63:armwave.c     **** {
 2558              		.loc 1 63 6 is_stmt 1 discriminator 3 view .LVU725
 2559              	.LBB23:
  65:armwave.c     ****     uint32_t value, word;
 2560              		.loc 1 65 5 discriminator 3 view .LVU726
  66:armwave.c     ****     uint8_t *wave_base;
 2561              		.loc 1 66 5 discriminator 3 view .LVU727
  67:armwave.c     ****     uint8_t *write_buffer_base;
 2562              		.loc 1 67 5 discriminator 3 view .LVU728
  68:armwave.c     ****     uint8_t *write_buffer;
 2563              		.loc 1 68 5 discriminator 3 view .LVU729
  69:armwave.c     ****     
 2564              		.loc 1 69 5 discriminator 3 view .LVU730
  71:armwave.c     **** 
 2565              		.loc 1 71 5 discriminator 3 view .LVU731
 2566              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 2567              		.loc 1 71 63 is_stmt 0 discriminator 3 view .LVU732
 2568 0b54 900600E0 		mul	r0, r0, r6	@ _15, g_armwave_state.bitdepth_height, _3
 2569              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 2570              		.loc 1 71 40 discriminator 3 view .LVU733
 2571 0b58 043094E5 		ldr	r3, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2572              	.LVL186:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2573              		.loc 1 74 5 is_stmt 1 discriminator 3 view .LVU734
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2574              		.loc 1 74 5 is_stmt 0 discriminator 3 view .LVU735
 2575 0b5c 2F00000A 		beq	.L154		@,
 2576 0b60 046046E2 		sub	r6, r6, #4	@ _76, _3,
 2577              	.LVL187:
 2578              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2579              		.loc 1 74 11 view .LVU736
 2580 0b64 00E0A0E3 		mov	lr, #0	@ w,
 2581              	.LVL188:
 2582              	.L157:
  75:armwave.c     **** 
 2583              		.loc 1 75 9 is_stmt 1 view .LVU737
 2584              	@ armwave.c:75:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  75:armwave.c     **** 
 2585              		.loc 1 75 64 is_stmt 0 view .LVU738
 2586 0b68 202094E5 		ldr	r2, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2587              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2588              		.loc 1 79 9 view .LVU739
 2589 0b6c 000057E3 		cmp	r7, #0	@ _4,
 2590              	@ armwave.c:75:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  75:armwave.c     **** 
 2591              		.loc 1 75 36 view .LVU740
 2592 0b70 14C094E5 		ldr	ip, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2593              	@ armwave.c:75:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  75:armwave.c     **** 
 2594              		.loc 1 75 64 view .LVU741
 2595 0b74 920E02E0 		mul	r2, r2, lr	@ _19, g_armwave_state.wave_stride, w
 2596              	.LVL189:
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2597              		.loc 1 79 9 is_stmt 1 view .LVU742
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2598              		.loc 1 79 9 is_stmt 0 view .LVU743
 2599 0b78 2400000A 		beq	.L155		@,
 2600 0b7c 062082E0 		add	r2, r2, r6	@ tmp203, _19, _76
 2601              	.LVL190:
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2602              		.loc 1 79 9 view .LVU744
 2603 0b80 02C08CE0 		add	ip, ip, r2	@ ivtmp.101, _16, tmp203
 2604              	.LVL191:
 2605              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2606              		.loc 1 79 16 view .LVU745
 2607 0b84 0020A0E3 		mov	r2, #0	@ yy,
 2608              	.LVL192:
 2609              	.L156:
  80:armwave.c     **** 
 2610              		.loc 1 80 13 is_stmt 1 view .LVU746
 2611              	@ armwave.c:80:             word = *(uint32_t*)(wave_base + yy);
  80:armwave.c     **** 
 2612              		.loc 1 80 18 is_stmt 0 view .LVU747
 2613 0b88 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _189, offset: 0B]
 2614              	.LVL193:
  82:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2615              		.loc 1 82 13 is_stmt 1 view .LVU748
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2616              		.loc 1 84 17 view .LVU749
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2617              		.loc 1 85 17 view .LVU750
  86:armwave.c     ****                 word >>= 8;
 2618              		.loc 1 86 17 view .LVU751
 2619              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2620              		.loc 1 85 63 is_stmt 0 view .LVU752
 2621 0b8c 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2622 0b90 01B082E2 		add	fp, r2, #1	@ tmp215, yy,
 2623              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 2624              		.loc 1 86 47 view .LVU753
 2625 0b94 7180E0E6 		uxtab	r8, r0, r1	@ tmp208, _15, word
 2626 0b98 998229E0 		mla	r9, r9, r2, r8	@ tmp209, g_armwave_state.bitdepth_height, yy, tmp208
 2627              	@ armwave.c:87:                 word >>= 8;
  87:armwave.c     ****             }
 2628              		.loc 1 87 22 view .LVU754
 2629 0b9c 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2630              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 2631              		.loc 1 86 47 view .LVU755
 2632 0ba0 0980D3E7 		ldrb	r8, [r3, r9]	@ zero_extendqisi2	@ *_63, *_63
 2633 0ba4 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp220, _15, word
 2634 0ba8 018088E2 		add	r8, r8, #1	@ tmp212, *_63,
 2635 0bac 0980C3E7 		strb	r8, [r3, r9]	@ tmp212, *_63
 2636              	.LVL194:
  87:armwave.c     ****             }
 2637              		.loc 1 87 17 is_stmt 1 view .LVU756
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2638              		.loc 1 84 17 view .LVU757
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2639              		.loc 1 85 17 view .LVU758
  86:armwave.c     ****                 word >>= 8;
 2640              		.loc 1 86 17 view .LVU759
 2641              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2642              		.loc 1 85 63 is_stmt 0 view .LVU760
 2643 0bb0 288094E5 		ldr	r8, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2644              	@ armwave.c:87:                 word >>= 8;
  87:armwave.c     ****             }
 2645              		.loc 1 87 22 view .LVU761
 2646 0bb4 2198A0E1 		lsr	r9, r1, #16	@ word, word,
 2647              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 2648              		.loc 1 86 47 view .LVU762
 2649 0bb8 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp243, _15, word,
 2650              	.LVL195:
  86:armwave.c     ****                 word >>= 8;
 2651              		.loc 1 86 47 view .LVU763
 2652 0bbc 98AB28E0 		mla	r8, r8, fp, r10	@ tmp221, g_armwave_state.bitdepth_height, tmp215, tmp220
 2653 0bc0 79A0E0E6 		uxtab	r10, r0, r9	@ tmp228, _15, word
 2654 0bc4 08B0D3E7 		ldrb	fp, [r3, r8]	@ zero_extendqisi2	@ *_83, *_83
 2655              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2656              		.loc 1 85 63 view .LVU764
 2657 0bc8 029082E2 		add	r9, r2, #2	@ tmp230, yy,
 2658              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 2659              		.loc 1 86 47 view .LVU765
 2660 0bcc 01B08BE2 		add	fp, fp, #1	@ tmp224, *_83,
 2661 0bd0 08B0C3E7 		strb	fp, [r3, r8]	@ tmp224, *_83
 2662              	.LVL196:
  87:armwave.c     ****             }
 2663              		.loc 1 87 17 is_stmt 1 view .LVU766
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2664              		.loc 1 84 17 view .LVU767
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2665              		.loc 1 85 17 view .LVU768
  86:armwave.c     ****                 word >>= 8;
 2666              		.loc 1 86 17 view .LVU769
 2667              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2668              		.loc 1 85 63 is_stmt 0 view .LVU770
 2669 0bd4 28B094E5 		ldr	fp, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2670 0bd8 038082E2 		add	r8, r2, #3	@ tmp239, yy,
 2671              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2672              		.loc 1 79 37 view .LVU771
 2673 0bdc 042082E2 		add	r2, r2, #4	@ yy, yy,
 2674              	.LVL197:
 2675              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 2676              		.loc 1 86 47 view .LVU772
 2677 0be0 9BA929E0 		mla	r9, fp, r9, r10	@ tmp233, g_armwave_state.bitdepth_height, tmp230, tmp228
 2678              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2679              		.loc 1 79 9 view .LVU773
 2680 0be4 020057E1 		cmp	r7, r2	@ _4, yy
 2681              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 2682              		.loc 1 86 47 view .LVU774
 2683 0be8 09A0D3E7 		ldrb	r10, [r3, r9]	@ zero_extendqisi2	@ *_103, *_103
 2684 0bec 01A08AE2 		add	r10, r10, #1	@ tmp236, *_103,
 2685 0bf0 09A0C3E7 		strb	r10, [r3, r9]	@ tmp236, *_103
 2686              	.LVL198:
  87:armwave.c     ****             }
 2687              		.loc 1 87 17 is_stmt 1 view .LVU775
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2688              		.loc 1 84 17 view .LVU776
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2689              		.loc 1 85 17 view .LVU777
  86:armwave.c     ****                 word >>= 8;
 2690              		.loc 1 86 17 view .LVU778
 2691              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2692              		.loc 1 85 63 is_stmt 0 view .LVU779
 2693 0bf4 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2694              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 2695              		.loc 1 86 47 view .LVU780
 2696 0bf8 991821E0 		mla	r1, r9, r8, r1	@ tmp244, g_armwave_state.bitdepth_height, tmp239, tmp243
 2697 0bfc 0180D3E7 		ldrb	r8, [r3, r1]	@ zero_extendqisi2	@ *_123, *_123
 2698 0c00 018088E2 		add	r8, r8, #1	@ tmp247, *_123,
 2699 0c04 0180C3E7 		strb	r8, [r3, r1]	@ tmp247, *_123
  87:armwave.c     ****             }
 2700              		.loc 1 87 17 is_stmt 1 view .LVU781
 2701              	.LVL199:
 2702              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2703              		.loc 1 79 9 is_stmt 0 view .LVU782
 2704 0c08 DEFFFF8A 		bhi	.L156		@,
 2705 0c0c 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2706              	.LVL200:
 2707              	.L155:
 2708              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2709              		.loc 1 74 44 view .LVU783
 2710 0c10 01E08EE2 		add	lr, lr, #1	@ w, w,
 2711              	.LVL201:
 2712              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2713              		.loc 1 74 5 view .LVU784
 2714 0c14 08005EE1 		cmp	lr, r8	@ w, prephitmp_177
 2715 0c18 D2FFFF3A 		bcc	.L157		@,
 2716 0c1c 2C9094E5 		ldr	r9, [r4, #44]	@ _92, g_armwave_state.slice_height
 2717              	.LVL202:
 2718              	.L154:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2719              		.loc 1 74 5 view .LVU785
 2720              	.LBE23:
 2721              	.LBE24:
 2722              	@ armwave.c:339:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 339:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2723              		.loc 1 339 28 discriminator 3 view .LVU786
 2724 0c20 0910A0E1 		mov	r1, r9	@, _92
 2725 0c24 020BA0E3 		mov	r0, #2048	@,
 2726              	.LVL203:
 339:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2727              		.loc 1 339 28 discriminator 3 view .LVU787
 2728 0c28 FEFFFFEB 		bl	__aeabi_uidiv		@
 2729              	.LVL204:
 2730              	@ armwave.c:339:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 339:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2731              		.loc 1 339 63 discriminator 3 view .LVU788
 2732 0c2c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2733              	.LVL205:
 2734              	@ armwave.c:339:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 339:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2735              		.loc 1 339 5 discriminator 3 view .LVU789
 2736 0c30 050050E1 		cmp	r0, r5	@, yy
 2737 0c34 C2FFFF8A 		bhi	.L158		@,
 2738 0c38 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2739              	.L171:
 2740              		.align	2
 2741              	.L170:
 2742 0c3c 00000000 		.word	g_armwave_state
 2743              		.cfi_endproc
 2744              	.LFE67:
 2746              		.align	2
 2747              		.global	armwave_test_fill_gdkbuf
 2748              		.syntax unified
 2749              		.arm
 2750              		.fpu vfp
 2752              	armwave_test_fill_gdkbuf:
 2753              	.LVL206:
 2754              	.LFB68:
 341:armwave.c     ****     }
 342:armwave.c     **** }
 343:armwave.c     **** 
 344:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 345:armwave.c     **** {
 2755              		.loc 1 345 1 is_stmt 1 view -0
 2756              		.cfi_startproc
 2757              		@ args = 0, pretend = 0, frame = 8
 2758              		@ frame_needed = 0, uses_anonymous_args = 0
 346:armwave.c     ****     //PyObject *mv;
 347:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 348:armwave.c     **** 
 349:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 350:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2759              		.loc 1 350 5 view .LVU791
 2760              	@ armwave.c:350:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2761              		.loc 1 350 11 is_stmt 0 view .LVU792
 2762 0c40 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2763              	@ armwave.c:345: {
 345:armwave.c     ****     //PyObject *mv;
 2764              		.loc 1 345 1 view .LVU793
 2765 0c44 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2766              		.cfi_def_cfa_offset 36
 2767              		.cfi_offset 4, -36
 2768              		.cfi_offset 5, -32
 2769              		.cfi_offset 6, -28
 2770              		.cfi_offset 7, -24
 2771              		.cfi_offset 8, -20
 2772              		.cfi_offset 9, -16
 2773              		.cfi_offset 10, -12
 2774              		.cfi_offset 11, -8
 2775              		.cfi_offset 14, -4
 2776 0c48 0CD04DE2 		sub	sp, sp, #12	@,,
 2777              		.cfi_def_cfa_offset 48
 2778              	.LBB27:
 2779              	.LBB28:
 2780              	@ armwave.c:250:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 250:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2781              		.loc 1 250 15 view .LVU794
 2782 0c4c 38219FE5 		ldr	r2, .L196	@ tmp206,
 2783              	.LBE28:
 2784              	.LBE27:
 2785              	@ armwave.c:350:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2786              		.loc 1 350 11 view .LVU795
 2787 0c50 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2788              	.LVL207:
 351:armwave.c     ****     
 352:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 353:armwave.c     ****  	armwave_fill_pixbuf_scaled(out_pixbuf);
 2789              		.loc 1 353 3 is_stmt 1 view .LVU796
 2790              	.LBB31:
 2791              	.LBI27:
 245:armwave.c     **** {
 2792              		.loc 1 245 6 view .LVU797
 2793              	.LBB29:
 247:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2794              		.loc 1 247 5 view .LVU798
 248:armwave.c     ****     uint8_t r, g, b, value, row;
 2795              		.loc 1 248 5 view .LVU799
 249:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2796              		.loc 1 249 5 view .LVU800
 250:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2797              		.loc 1 250 5 view .LVU801
 2798              	@ armwave.c:254:     assert(out_buffer != NULL);
 254:armwave.c     **** 
 2799              		.loc 1 254 5 is_stmt 0 view .LVU802
 2800 0c54 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2801              	@ armwave.c:250:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 250:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2802              		.loc 1 250 15 view .LVU803
 2803 0c58 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2804              	.LVL208:
 251:armwave.c     ****     uint32_t offset;
 2805              		.loc 1 251 5 is_stmt 1 view .LVU804
 252:armwave.c     **** 
 2806              		.loc 1 252 5 view .LVU805
 254:armwave.c     **** 
 2807              		.loc 1 254 5 view .LVU806
 2808 0c5c 4500000A 		beq	.L194		@,
 256:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2809              		.loc 1 256 5 view .LVU807
 2810              	@ armwave.c:256:     npix = g_armwave_state.target_width * 256; 
 256:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2811              		.loc 1 256 41 is_stmt 0 view .LVU808
 2812 0c60 3C5092E5 		ldr	r5, [r2, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2813 0c64 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2814              	.LVL209:
 257:armwave.c     **** 
 2815              		.loc 1 257 5 is_stmt 1 view .LVU809
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2816              		.loc 1 259 5 view .LVU810
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2817              		.loc 1 259 5 is_stmt 0 view .LVU811
 2818 0c68 000055E3 		cmp	r5, #0	@ npix,
 2819 0c6c 0B0000DA 		ble	.L172		@,
 2820              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2821              		.loc 1 272 52 view .LVU812
 2822 0c70 F235D2E1 		ldrsh	r3, [r2, #82]	@ _26, g_armwave_state.ch1_color.g
 2823              	@ armwave.c:271:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2824              		.loc 1 271 52 view .LVU813
 2825 0c74 F0B5D2E1 		ldrsh	fp, [r2, #80]	@ _20, g_armwave_state.ch1_color.r
 2826              	@ armwave.c:259:     for(n = 0; n < npix; n += 4) {
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2827              		.loc 1 259 11 view .LVU814
 2828 0c78 0010A0E3 		mov	r1, #0	@ n,
 2829              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2830              		.loc 1 272 52 view .LVU815
 2831 0c7c 00308DE5 		str	r3, [sp]	@ _26, %sfp
 2832              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     **** 
 2833              		.loc 1 273 52 view .LVU816
 2834 0c80 F435D2E1 		ldrsh	r3, [r2, #84]	@ _30, g_armwave_state.ch1_color.b
 2835 0c84 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 2836              	.LVL210:
 2837              	.L179:
 263:armwave.c     **** 
 2838              		.loc 1 263 9 is_stmt 1 view .LVU817
 2839              	@ armwave.c:263:         wave_word = *base_32ptr++;
 263:armwave.c     **** 
 2840              		.loc 1 263 19 is_stmt 0 view .LVU818
 2841 0c88 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 2842              	.LVL211:
 265:armwave.c     ****             for(w = 0; w < 4; w++) {
 2843              		.loc 1 265 9 is_stmt 1 view .LVU819
 2844              	@ armwave.c:265:         if(COND_UNLIKELY(wave_word != 0)) {
 265:armwave.c     ****             for(w = 0; w < 4; w++) {
 2845              		.loc 1 265 11 is_stmt 0 view .LVU820
 2846 0c8c 000050E3 		cmp	r0, #0	@ wave_word,
 2847 0c90 0400001A 		bne	.L191		@,
 2848 0c94 041081E2 		add	r1, r1, #4	@ n, n,
 2849              	.L175:
 2850              	.LVL212:
 2851              	@ armwave.c:259:     for(n = 0; n < npix; n += 4) {
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2852              		.loc 1 259 5 view .LVU821
 2853 0c98 010055E1 		cmp	r5, r1	@ npix, n
 2854 0c9c F9FFFFCA 		bgt	.L179		@,
 2855              	.LVL213:
 2856              	.L172:
 259:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2857              		.loc 1 259 5 view .LVU822
 2858              	.LBE29:
 2859              	.LBE31:
 2860              	@ armwave.c:354: }
 354:armwave.c     **** }
 2861              		.loc 1 354 1 view .LVU823
 2862 0ca0 0CD08DE2 		add	sp, sp, #12	@,,
 2863              		.cfi_remember_state
 2864              		.cfi_def_cfa_offset 36
 2865              		@ sp needed	@
 2866 0ca4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2867              	.LVL214:
 2868              	.L191:
 2869              		.cfi_restore_state
 2870              	.LBB32:
 2871              	.LBB30:
 2872              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2873              		.loc 1 270 19 view .LVU824
 2874 0ca8 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2875              	@ armwave.c:265:         if(COND_UNLIKELY(wave_word != 0)) {
 265:armwave.c     ****             for(w = 0; w < 4; w++) {
 2876              		.loc 1 265 11 view .LVU825
 2877 0cac 0160A0E1 		mov	r6, r1	@ ivtmp.118, n
 2878              	.LVL215:
 267:armwave.c     ****                 wave_word >>= 8;
 2879              		.loc 1 267 17 is_stmt 1 view .LVU826
 268:armwave.c     **** 
 2880              		.loc 1 268 17 view .LVU827
 2881              	@ armwave.c:268:                 wave_word >>= 8;
 268:armwave.c     **** 
 2882              		.loc 1 268 27 is_stmt 0 view .LVU828
 2883 0cb0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2884              	.LVL216:
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2885              		.loc 1 270 17 is_stmt 1 view .LVU829
 2886 0cb4 041081E2 		add	r1, r1, #4	@ n, ivtmp.118,
 2887              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2888              		.loc 1 270 19 is_stmt 0 view .LVU830
 2889 0cb8 0500001A 		bne	.L195		@,
 2890              	.L176:
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2891              		.loc 1 270 19 view .LVU831
 2892 0cbc 016086E2 		add	r6, r6, #1	@ ivtmp.118, ivtmp.118,
 2893              	@ armwave.c:266:             for(w = 0; w < 4; w++) {
 266:armwave.c     ****                 value = wave_word & 0xff;
 2894              		.loc 1 266 13 view .LVU832
 2895 0cc0 060051E1 		cmp	r1, r6	@ n, ivtmp.118
 2896 0cc4 F3FFFF0A 		beq	.L175		@,
 267:armwave.c     ****                 wave_word >>= 8;
 2897              		.loc 1 267 17 is_stmt 1 view .LVU833
 2898              	.LVL217:
 268:armwave.c     **** 
 2899              		.loc 1 268 17 view .LVU834
 2900              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2901              		.loc 1 270 19 is_stmt 0 view .LVU835
 2902 0cc8 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2903              	@ armwave.c:268:                 wave_word >>= 8;
 268:armwave.c     **** 
 2904              		.loc 1 268 27 view .LVU836
 2905 0ccc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2906              	.LVL218:
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2907              		.loc 1 270 17 is_stmt 1 view .LVU837
 2908              	@ armwave.c:270:                 if(value != 0) {
 270:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2909              		.loc 1 270 19 is_stmt 0 view .LVU838
 2910 0cd0 F9FFFF0A 		beq	.L176		@,
 2911              	.L195:
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2912              		.loc 1 271 21 is_stmt 1 view .LVU839
 2913              	.LVL219:
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2914              		.loc 1 272 21 view .LVU840
 273:armwave.c     **** 
 2915              		.loc 1 273 21 view .LVU841
 275:armwave.c     ****                     g = MIN(gg, 255);
 2916              		.loc 1 275 21 view .LVU842
 276:armwave.c     ****                     b = MIN(bb, 255);
 2917              		.loc 1 276 21 view .LVU843
 277:armwave.c     **** 
 2918              		.loc 1 277 21 view .LVU844
 280:armwave.c     **** 
 2919              		.loc 1 280 21 view .LVU845
 2920              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     **** 
 2921              		.loc 1 273 55 is_stmt 0 view .LVU846
 2922 0cd4 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 2923              	@ armwave.c:284:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 284:armwave.c     ****                     xx = (nsub >> 8);
 2924              		.loc 1 284 57 view .LVU847
 2925 0cd8 1CA092E5 		ldr	r10, [r2, #28]	@ _52, g_armwave_state.vscale
 2926              	@ armwave.c:284:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 284:armwave.c     ****                     xx = (nsub >> 8);
 2927              		.loc 1 284 32 view .LVU848
 2928 0cdc 7670EFE6 		uxtb	r7, r6	@ ivtmp.118, ivtmp.118
 2929              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     **** 
 2930              		.loc 1 273 55 view .LVU849
 2931 0ce0 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 2932              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2933              		.loc 1 272 55 view .LVU850
 2934 0ce4 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 2935              	@ armwave.c:284:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 284:armwave.c     ****                     xx = (nsub >> 8);
 2936              		.loc 1 284 24 view .LVU851
 2937 0ce8 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.118
 2938              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2939              		.loc 1 272 55 view .LVU852
 2940 0cec 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 2941              	@ armwave.c:273:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 273:armwave.c     **** 
 2942              		.loc 1 273 24 view .LVU853
 2943 0cf0 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 2944              	.LVL220:
 2945              	@ armwave.c:271:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2946              		.loc 1 271 55 view .LVU854
 2947 0cf4 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 2948              	.LVL221:
 2949              	@ armwave.c:272:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 272:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2950              		.loc 1 272 24 view .LVU855
 2951 0cf8 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 2952              	.LVL222:
 2953              	@ armwave.c:277:                     b = MIN(bb, 255);
 277:armwave.c     **** 
 2954              		.loc 1 277 25 view .LVU856
 2955 0cfc FF005CE3 		cmp	ip, #255	@ bb,
 2956 0d00 FFC0A0A3 		movge	ip, #255	@ bb,
 2957              	.LVL223:
 2958              	@ armwave.c:276:                     g = MIN(gg, 255);
 276:armwave.c     ****                     b = MIN(bb, 255);
 2959              		.loc 1 276 25 view .LVU857
 2960 0d04 FF0054E3 		cmp	r4, #255	@ gg,
 2961 0d08 FF40A0A3 		movge	r4, #255	@ gg,
 2962              	.LVL224:
 2963              	@ armwave.c:271:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 271:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2964              		.loc 1 271 24 view .LVU858
 2965 0d0c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 2966              	.LVL225:
 2967              	@ armwave.c:275:                     r = MIN(rr, 255);
 275:armwave.c     ****                     g = MIN(gg, 255);
 2968              		.loc 1 275 25 view .LVU859
 2969 0d10 FF005EE3 		cmp	lr, #255	@ rr,
 2970              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2971              		.loc 1 280 56 view .LVU860
 2972 0d14 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 2973              	@ armwave.c:275:                     r = MIN(rr, 255);
 275:armwave.c     ****                     g = MIN(gg, 255);
 2974              		.loc 1 275 25 view .LVU861
 2975 0d18 FFE0A0A3 		movge	lr, #255	@ rr,
 2976              	.LVL226:
 2977              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2978              		.loc 1 280 44 view .LVU862
 2979 0d1c 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 2980 0d20 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2981              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2982              		.loc 1 280 56 view .LVU863
 2983 0d24 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 2984              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2985              		.loc 1 280 51 view .LVU864
 2986 0d28 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 2987              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2988              		.loc 1 280 62 view .LVU865
 2989 0d2c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2990 0d30 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 2991              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2992              		.loc 1 287 21 view .LVU866
 2993 0d34 00005AE3 		cmp	r10, #0	@ _52,
 2994              	@ armwave.c:280:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 280:armwave.c     **** 
 2995              		.loc 1 280 26 view .LVU867
 2996 0d38 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2997              	.LVL227:
 283:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2998              		.loc 1 283 21 is_stmt 1 view .LVU868
 284:armwave.c     ****                     xx = (nsub >> 8);
 2999              		.loc 1 284 21 view .LVU869
 285:armwave.c     **** 
 3000              		.loc 1 285 21 view .LVU870
 3001              	@ armwave.c:285:                     xx = (nsub >> 8);
 285:armwave.c     **** 
 3002              		.loc 1 285 32 is_stmt 0 view .LVU871
 3003 0d3c 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.118,
 3004              	.LVL228:
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3005              		.loc 1 287 21 is_stmt 1 view .LVU872
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3006              		.loc 1 287 21 is_stmt 0 view .LVU873
 3007 0d40 DDFFFF0A 		beq	.L176		@,
 3008              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3009              		.loc 1 287 29 view .LVU874
 3010 0d44 00C0A0E3 		mov	ip, #0	@ row,
 3011              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3012              		.loc 1 287 38 view .LVU875
 3013 0d48 0CE0A0E1 		mov	lr, ip	@ _56, row
 3014              	.LVL229:
 3015              	.L177:
 288:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3016              		.loc 1 288 25 is_stmt 1 view .LVU876
 289:armwave.c     ****                     }
 3017              		.loc 1 289 25 view .LVU877
 3018              	@ armwave.c:288:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 288:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3019              		.loc 1 288 52 is_stmt 0 view .LVU878
 3020 0d4c 3C4092E5 		ldr	r4, [r2, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3021              	@ armwave.c:288:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 288:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3022              		.loc 1 288 45 view .LVU879
 3023 0d50 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3024              	.LVL230:
 3025              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3026              		.loc 1 287 67 view .LVU880
 3027 0d54 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3028              	.LVL231:
 3029              	@ armwave.c:289:                         *(out_buffer_base + offset) = word;
 289:armwave.c     ****                     }
 3030              		.loc 1 289 43 view .LVU881
 3031 0d58 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3032              	.LVL232:
 3033              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3034              		.loc 1 287 67 view .LVU882
 3035 0d5c 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3036              	.LVL233:
 3037              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3038              		.loc 1 287 38 view .LVU883
 3039 0d60 0CE0A0E1 		mov	lr, ip	@ _56, row
 3040              	@ armwave.c:289:                         *(out_buffer_base + offset) = word;
 289:armwave.c     ****                     }
 3041              		.loc 1 289 53 view .LVU884
 3042 0d64 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3043              	@ armwave.c:287:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3044              		.loc 1 287 21 view .LVU885
 3045 0d68 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3046              	.LVL234:
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3047              		.loc 1 287 21 view .LVU886
 3048 0d6c 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3049 0d70 F5FFFF3A 		bcc	.L177		@,
 287:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3050              		.loc 1 287 21 view .LVU887
 3051 0d74 D0FFFFEA 		b	.L176		@
 3052              	.LVL235:
 3053              	.L194:
 254:armwave.c     **** 
 3054              		.loc 1 254 5 is_stmt 1 view .LVU888
 3055 0d78 10309FE5 		ldr	r3, .L196+4	@,
 3056 0d7c FE20A0E3 		mov	r2, #254	@,
 3057 0d80 0C109FE5 		ldr	r1, .L196+8	@,
 3058 0d84 0C009FE5 		ldr	r0, .L196+12	@,
 3059              	.LVL236:
 254:armwave.c     **** 
 3060              		.loc 1 254 5 is_stmt 0 view .LVU889
 3061 0d88 FEFFFFEB 		bl	__assert_fail		@
 3062              	.LVL237:
 3063              	.L197:
 3064              		.align	2
 3065              	.L196:
 3066 0d8c 00000000 		.word	g_armwave_state
 3067 0d90 30000000 		.word	.LANCHOR0+48
 3068 0d94 00000000 		.word	.LC0
 3069 0d98 E8000000 		.word	.LC6
 3070              	.LBE30:
 3071              	.LBE32:
 3072              		.cfi_endproc
 3073              	.LFE68:
 3075              		.align	2
 3076              		.global	armwave_test_dump_buffer_to_ppm
 3077              		.syntax unified
 3078              		.arm
 3079              		.fpu vfp
 3081              	armwave_test_dump_buffer_to_ppm:
 3082              	.LVL238:
 3083              	.LFB69:
 355:armwave.c     **** 
 356:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 357:armwave.c     **** {
 3084              		.loc 1 357 1 is_stmt 1 view -0
 3085              		.cfi_startproc
 3086              		@ args = 0, pretend = 0, frame = 0
 3087              		@ frame_needed = 0, uses_anonymous_args = 0
 3088              		@ link register save eliminated.
 358:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3089              		.loc 1 358 5 view .LVU891
 3090 0d9c 08309FE5 		ldr	r3, .L199	@ tmp112,
 3091 0da0 0010A0E1 		mov	r1, r0	@, fn
 3092 0da4 4C0093E5 		ldr	r0, [r3, #76]	@, g_armwave_state.out_pixbuf
 3093              	.LVL239:
 3094              		.loc 1 358 5 is_stmt 0 view .LVU892
 3095 0da8 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3096              	.LVL240:
 3097              	.L200:
 3098              		.loc 1 358 5 view .LVU893
 3099              		.align	2
 3100              	.L199:
 3101 0dac 00000000 		.word	g_armwave_state
 3102              		.cfi_endproc
 3103              	.LFE69:
 3105              		.align	2
 3106              		.global	armwave_test_create_am_sine
 3107              		.syntax unified
 3108              		.arm
 3109              		.fpu vfp
 3111              	armwave_test_create_am_sine:
 3112              	.LVL241:
 3113              	.LFB70:
 359:armwave.c     **** }
 360:armwave.c     **** 
 361:armwave.c     **** /*
 362:armwave.c     ****  * Make a test AM waveform for render tests.
 363:armwave.c     ****  *
 364:armwave.c     ****  * @param   mod                 modulation depth
 365:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 368:armwave.c     **** {
 3114              		.loc 1 368 1 is_stmt 1 view -0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 8
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 369:armwave.c     ****     float v, noise, xnoise, mod_val;
 3118              		.loc 1 369 5 view .LVU895
 370:armwave.c     ****     int w, x;
 3119              		.loc 1 370 5 view .LVU896
 371:armwave.c     **** 
 372:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
 3120              		.loc 1 372 5 view .LVU897
 3121              	@ armwave.c:368: {
 368:armwave.c     ****     float v, noise, xnoise, mod_val;
 3122              		.loc 1 368 1 is_stmt 0 view .LVU898
 3123 0db0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3124              		.cfi_def_cfa_offset 32
 3125              		.cfi_offset 4, -32
 3126              		.cfi_offset 5, -28
 3127              		.cfi_offset 6, -24
 3128              		.cfi_offset 7, -20
 3129              		.cfi_offset 8, -16
 3130              		.cfi_offset 9, -12
 3131              		.cfi_offset 10, -8
 3132              		.cfi_offset 14, -4
 3133 0db4 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3134              		.cfi_def_cfa_offset 88
 3135              		.cfi_offset 80, -88
 3136              		.cfi_offset 81, -84
 3137              		.cfi_offset 82, -80
 3138              		.cfi_offset 83, -76
 3139              		.cfi_offset 84, -72
 3140              		.cfi_offset 85, -68
 3141              		.cfi_offset 86, -64
 3142              		.cfi_offset 87, -60
 3143              		.cfi_offset 88, -56
 3144              		.cfi_offset 89, -52
 3145              		.cfi_offset 90, -48
 3146              		.cfi_offset 91, -44
 3147              		.cfi_offset 92, -40
 3148              		.cfi_offset 93, -36
 3149 0db8 54819FE5 		ldr	r8, .L220+36	@ _76,
 3150 0dbc 40DAF0EE 		vmov.f32	s27, s0	@ mod, mod
 3151 0dc0 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.139, _76,
 3152 0dc4 60CAB0EE 		vmov.f32	s24, s1	@ noise_fraction, noise_fraction
 3153              	@ armwave.c:373:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 373:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3154              		.loc 1 373 37 view .LVU899
 3155 0dc8 48DA9FED 		vldr.32	s26, .L220	@ tmp158,
 3156              	@ armwave.c:373:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3157              		.loc 1 373 17 view .LVU900
 3158 0dcc 48CADFED 		vldr.32	s25, .L220+4	@ tmp160,
 3159              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 374:armwave.c     ****         //mod = 1.0f;
 375:armwave.c     **** 
 376:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 377:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 378:armwave.c     ****             noise *= noise;
 379:armwave.c     ****             noise *= noise;
 380:armwave.c     ****             noise *= noise;
 381:armwave.c     **** 
 382:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 383:armwave.c     ****                 noise = -noise;
 384:armwave.c     **** 
 385:armwave.c     ****             noise += 1.0f;
 386:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 387:armwave.c     **** 
 388:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * noise;
 3160              		.loc 1 388 29 view .LVU901
 3161 0dd0 48BADFED 		vldr.32	s23, .L220+8	@ tmp168,
 3162              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 3163              		.loc 1 388 33 view .LVU902
 3164 0dd4 48BA9FED 		vldr.32	s22, .L220+12	@ tmp170,
 3165              	@ armwave.c:386:             xnoise = (rand() & 0xffff) / 6553500.0f;
 386:armwave.c     **** 
 3166              		.loc 1 386 20 view .LVU903
 3167 0dd8 48AADFED 		vldr.32	s21, .L220+16	@ tmp175,
 3168              	@ armwave.c:385:             noise += 1.0f;
 385:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3169              		.loc 1 385 19 view .LVU904
 3170 0ddc 48AA9FED 		vldr.32	s20, .L220+20	@ tmp181,
 3171 0de0 02A886E2 		add	r10, r6, #131072	@ _82,,
 3172              	@ armwave.c:368: {
 368:armwave.c     ****     float v, noise, xnoise, mod_val;
 3173              		.loc 1 368 1 view .LVU905
 3174 0de4 08D04DE2 		sub	sp, sp, #8	@,,
 3175              		.cfi_def_cfa_offset 96
 3176 0de8 0FA08AE2 		add	r10, r10, #15	@ _82, _82,
 3177 0dec 0F6086E2 		add	r6, r6, #15	@ ivtmp.139, ivtmp.139,
 3178 0df0 008068E2 		rsb	r8, r8, #0	@ ivtmp.142, _76
 3179              	@ armwave.c:372:     for(w = 0; w < TEST_NWAVES; w++) {
 372:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3180              		.loc 1 372 11 view .LVU906
 3181 0df4 0090A0E3 		mov	r9, #0	@ w,
 3182              	.LVL242:
 3183              	.L207:
 373:armwave.c     ****         //mod = 1.0f;
 3184              		.loc 1 373 9 is_stmt 1 view .LVU907
 3185              	@ armwave.c:373:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 373:armwave.c     ****         //mod = 1.0f;
 3186              		.loc 1 373 28 is_stmt 0 view .LVU908
 3187 0df8 909A07EE 		vmov	s15, r9	@ int	@ w, w
 3188              	@ armwave.c:373:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 373:armwave.c     ****         //mod = 1.0f;
 3189              		.loc 1 373 17 view .LVU909
 3190 0dfc 6C8AB0EE 		vmov.f32	s16, s25	@ mod_val, tmp160
 3191              	@ armwave.c:390:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 389:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 390:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
 3192              		.loc 1 390 58 view .LVU910
 3193 0e00 409ADFED 		vldr.32	s19, .L220+24	@ tmp186,
 3194 0e04 409A9FED 		vldr.32	s18, .L220+28	@ tmp187,
 3195              	@ armwave.c:373:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 373:armwave.c     ****         //mod = 1.0f;
 3196              		.loc 1 373 28 view .LVU911
 3197 0e08 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp156, w
 3198 0e0c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.132, ivtmp.139,
 3199 0e10 017088E2 		add	r7, r8, #1	@ tmp193, ivtmp.142,
 3200              	@ armwave.c:373:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 373:armwave.c     ****         //mod = 1.0f;
 3201              		.loc 1 373 37 view .LVU912
 3202 0e14 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp157, tmp156, tmp158
 3203              	@ armwave.c:373:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 373:armwave.c     ****         //mod = 1.0f;
 3204              		.loc 1 373 17 view .LVU913
 3205 0e18 AD8A07EE 		vmla.f32	s16, s15, s27	@ mod_val, tmp157, mod
 3206              	.LVL243:
 376:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3207              		.loc 1 376 9 is_stmt 1 view .LVU914
 376:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3208              		.loc 1 376 9 is_stmt 0 view .LVU915
 3209 0e1c C88AB7EE 		vcvt.f64.f32	d8, s16	@ tmp194, mod_val
 3210              	.LVL244:
 3211              	.L206:
 3212              	@ armwave.c:377:             noise  = ((rand() & 0xffff) * noise_fraction);
 377:armwave.c     ****             noise *= noise;
 3213              		.loc 1 377 24 view .LVU916
 3214 0e20 FEFFFFEB 		bl	rand		@
 3215              	.LVL245:
 3216 0e24 054087E0 		add	r4, r7, r5	@ _72, tmp193, ivtmp.132
 3217              	.LVL246:
 377:armwave.c     ****             noise *= noise;
 3218              		.loc 1 377 13 is_stmt 1 view .LVU917
 3219              	@ armwave.c:377:             noise  = ((rand() & 0xffff) * noise_fraction);
 377:armwave.c     ****             noise *= noise;
 3220              		.loc 1 377 31 is_stmt 0 view .LVU918
 3221 0e28 7000FFE6 		uxth	r0, r0	@ tmp162,
 3222              	@ armwave.c:377:             noise  = ((rand() & 0xffff) * noise_fraction);
 377:armwave.c     ****             noise *= noise;
 3223              		.loc 1 377 41 view .LVU919
 3224 0e2c 900A07EE 		vmov	s15, r0	@ int	@ tmp162, tmp162
 3225 0e30 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp164, tmp162
 3226              	@ armwave.c:377:             noise  = ((rand() & 0xffff) * noise_fraction);
 377:armwave.c     ****             noise *= noise;
 3227              		.loc 1 377 20 view .LVU920
 3228 0e34 8C7A67EE 		vmul.f32	s15, s15, s24	@ noise, tmp164, noise_fraction
 3229              	.LVL247:
 378:armwave.c     ****             noise *= noise;
 3230              		.loc 1 378 13 is_stmt 1 view .LVU921
 3231              	@ armwave.c:378:             noise *= noise;
 378:armwave.c     ****             noise *= noise;
 3232              		.loc 1 378 19 is_stmt 0 view .LVU922
 3233 0e38 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3234              	.LVL248:
 379:armwave.c     ****             noise *= noise;
 3235              		.loc 1 379 13 is_stmt 1 view .LVU923
 3236              	@ armwave.c:379:             noise *= noise;
 379:armwave.c     ****             noise *= noise;
 3237              		.loc 1 379 19 is_stmt 0 view .LVU924
 3238 0e3c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3239              	.LVL249:
 380:armwave.c     **** 
 3240              		.loc 1 380 13 is_stmt 1 view .LVU925
 3241              	@ armwave.c:380:             noise *= noise;
 380:armwave.c     **** 
 3242              		.loc 1 380 19 is_stmt 0 view .LVU926
 3243 0e40 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3244              	.LVL250:
 382:armwave.c     ****                 noise = -noise;
 3245              		.loc 1 382 13 is_stmt 1 view .LVU927
 3246              	@ armwave.c:382:             if((rand() & 0xffff) > 0x7fff)
 382:armwave.c     ****                 noise = -noise;
 3247              		.loc 1 382 17 is_stmt 0 view .LVU928
 3248 0e44 FEFFFFEB 		bl	rand		@
 3249              	.LVL251:
 383:armwave.c     **** 
 3250              		.loc 1 383 17 is_stmt 1 view .LVU929
 3251              	@ armwave.c:382:             if((rand() & 0xffff) > 0x7fff)
 382:armwave.c     ****                 noise = -noise;
 3252              		.loc 1 382 15 is_stmt 0 view .LVU930
 3253 0e48 020910E3 		tst	r0, #32768	@,
 3254              	@ armwave.c:383:                 noise = -noise;
 383:armwave.c     **** 
 3255              		.loc 1 383 23 view .LVU931
 3256 0e4c 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3257              	.LVL252:
 385:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3258              		.loc 1 385 13 is_stmt 1 view .LVU932
 386:armwave.c     **** 
 3259              		.loc 1 386 13 view .LVU933
 3260              	@ armwave.c:386:             xnoise = (rand() & 0xffff) / 6553500.0f;
 386:armwave.c     **** 
 3261              		.loc 1 386 23 is_stmt 0 view .LVU934
 3262 0e50 FEFFFFEB 		bl	rand		@
 3263              	.LVL253:
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3264              		.loc 1 388 13 is_stmt 1 view .LVU935
 3265              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3266              		.loc 1 388 29 is_stmt 0 view .LVU936
 3267 0e54 904A07EE 		vmov	s15, r4	@ int	@ _72, _72
 3268 0e58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp166, _72
 3269 0e5c AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp167, tmp166, tmp168
 3270              	@ armwave.c:386:             xnoise = (rand() & 0xffff) / 6553500.0f;
 386:armwave.c     **** 
 3271              		.loc 1 386 30 view .LVU937
 3272 0e60 7000FFE6 		uxth	r0, r0	@ tmp171,
 3273              	.LVL254:
 3274              	@ armwave.c:386:             xnoise = (rand() & 0xffff) / 6553500.0f;
 386:armwave.c     **** 
 3275              		.loc 1 386 40 view .LVU938
 3276 0e64 100A07EE 		vmov	s14, r0	@ int	@ tmp171, tmp171
 3277 0e68 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp173, tmp171
 3278              	@ armwave.c:386:             xnoise = (rand() & 0xffff) / 6553500.0f;
 386:armwave.c     **** 
 3279              		.loc 1 386 20 view .LVU939
 3280 0e6c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp173, tmp175
 3281              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3282              		.loc 1 388 60 view .LVU940
 3283 0e70 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp176, tmp167, tmp170
 3284              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3285              		.loc 1 388 18 view .LVU941
 3286 0e74 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp176
 3287 0e78 FEFFFFEB 		bl	sin		@
 3288              	.LVL255:
 3289              		.loc 1 390 13 is_stmt 1 view .LVU942
 3290              	@ armwave.c:385:             noise += 1.0f;
 385:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3291              		.loc 1 385 19 is_stmt 0 view .LVU943
 3292 0e7c 0A7A7EEE 		vadd.f32	s15, s28, s20	@ noise, noise, tmp181
 3293              	@ armwave.c:390:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3294              		.loc 1 390 56 view .LVU944
 3295 0e80 226ADFED 		vldr.32	s13, .L220+32	@ tmp189,
 3296 0e84 0030A0E3 		mov	r3, #0	@ iftmp.18_29,
 3297              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3298              		.loc 1 388 81 view .LVU945
 3299 0e88 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp182, noise
 3300              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3301              		.loc 1 388 70 view .LVU946
 3302 0e8c 000B28EE 		vmul.f64	d0, d8, d0	@ tmp179, tmp194,
 3303              	.LVL256:
 3304              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3305              		.loc 1 388 81 view .LVU947
 3306 0e90 077B20EE 		vmul.f64	d7, d0, d7	@ tmp183, tmp179, tmp182
 3307              	@ armwave.c:388:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 388:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3308              		.loc 1 388 15 view .LVU948
 3309 0e94 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp183
 3310              	@ armwave.c:390:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3311              		.loc 1 390 58 view .LVU949
 3312 0e98 497AF0EE 		vmov.f32	s15, s18	@ _23, tmp187
 3313 0e9c 297A47EE 		vmla.f32	s15, s14, s19	@ _23, v, tmp186
 3314 0ea0 C07AF5EE 		vcmpe.f32	s15, #0	@ _23
 3315 0ea4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3316 0ea8 050000DA 		ble	.L203		@,
 3317              	@ armwave.c:390:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3318              		.loc 1 390 56 discriminator 1 view .LVU950
 3319 0eac E67AF4EE 		vcmpe.f32	s15, s13	@ _23, tmp189
 3320 0eb0 FF30A0E3 		mov	r3, #255	@ iftmp.18_29,
 3321 0eb4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3322 0eb8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp191, _23
 3323 0ebc 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp191, %sfp
 3324 0ec0 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.18_29, %sfp
 3325              	.L203:
 3326              	@ armwave.c:390:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3327              		.loc 1 390 56 discriminator 12 view .LVU951
 3328 0ec4 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.18_29, MEM[base: _61, offset: 0B]
 3329              	.LVL257:
 3330              	@ armwave.c:376:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 376:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3331              		.loc 1 376 9 discriminator 12 view .LVU952
 3332 0ec8 060055E1 		cmp	r5, r6	@ ivtmp.132, ivtmp.139
 3333 0ecc D3FFFF1A 		bne	.L206		@,
 3334 0ed0 026B85E2 		add	r6, r5, #2048	@ ivtmp.139, ivtmp.132,
 3335              	.LVL258:
 3336              	@ armwave.c:372:     for(w = 0; w < TEST_NWAVES; w++) {
 372:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3337              		.loc 1 372 5 discriminator 2 view .LVU953
 3338 0ed4 0A0056E1 		cmp	r6, r10	@ ivtmp.139, _82
 3339              	@ armwave.c:372:     for(w = 0; w < TEST_NWAVES; w++) {
 372:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3340              		.loc 1 372 34 discriminator 2 view .LVU954
 3341 0ed8 019089E2 		add	r9, r9, #1	@ w, w,
 3342              	.LVL259:
 372:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3343              		.loc 1 372 34 discriminator 2 view .LVU955
 3344 0edc 028B48E2 		sub	r8, r8, #2048	@ ivtmp.142, ivtmp.142,
 3345              	@ armwave.c:372:     for(w = 0; w < TEST_NWAVES; w++) {
 372:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3346              		.loc 1 372 5 discriminator 2 view .LVU956
 3347 0ee0 C4FFFF1A 		bne	.L207		@,
 3348              	@ armwave.c:393: }
 391:armwave.c     ****         }
 392:armwave.c     ****     }
 393:armwave.c     **** }
 3349              		.loc 1 393 1 view .LVU957
 3350 0ee4 08D08DE2 		add	sp, sp, #8	@,,
 3351              		.cfi_def_cfa_offset 88
 3352              		@ sp needed	@
 3353 0ee8 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3354              		.cfi_restore 92
 3355              		.cfi_restore 93
 3356              		.cfi_restore 90
 3357              		.cfi_restore 91
 3358              		.cfi_restore 88
 3359              		.cfi_restore 89
 3360              		.cfi_restore 86
 3361              		.cfi_restore 87
 3362              		.cfi_restore 84
 3363              		.cfi_restore 85
 3364              		.cfi_restore 82
 3365              		.cfi_restore 83
 3366              		.cfi_restore 80
 3367              		.cfi_restore 81
 3368              		.cfi_def_cfa_offset 32
 3369              	.LVL260:
 3370              		.loc 1 393 1 view .LVU958
 3371 0eec F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3372              	.LVL261:
 3373              	.L221:
 3374              		.loc 1 393 1 view .LVU959
 3375              		.align	2
 3376              	.L220:
 3377 0ef0 0000803C 		.word	1015021568
 3378 0ef4 0000003F 		.word	1056964608
 3379 0ef8 C3F5C840 		.word	1086911939
 3380 0efc 0000003A 		.word	973078528
 3381 0f00 38FFC74A 		.word	1254620984
 3382 0f04 0000803F 		.word	1065353216
 3383 0f08 0000FE42 		.word	1123942400
 3384 0f0c 00000043 		.word	1124073472
 3385 0f10 00007F43 		.word	1132396544
 3386 0f14 00000000 		.word	test_wave_buffer
 3387              		.cfi_endproc
 3388              	.LFE70:
 3390              		.align	2
 3391              		.global	armwave_test_create_square
 3392              		.syntax unified
 3393              		.arm
 3394              		.fpu vfp
 3396              	armwave_test_create_square:
 3397              	.LVL262:
 3398              	.LFB71:
 394:armwave.c     **** 
 395:armwave.c     **** /*
 396:armwave.c     ****  * Make a test square waveform.
 397:armwave.c     ****  *
 398:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 399:armwave.c     ****  */
 400:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 401:armwave.c     **** {
 3399              		.loc 1 401 1 is_stmt 1 view -0
 3400              		.cfi_startproc
 3401              		@ args = 0, pretend = 0, frame = 8
 3402              		@ frame_needed = 0, uses_anonymous_args = 0
 402:armwave.c     ****     uint8_t v;
 3403              		.loc 1 402 5 view .LVU961
 403:armwave.c     ****     float noise, xnoise;
 3404              		.loc 1 403 5 view .LVU962
 404:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3405              		.loc 1 404 5 view .LVU963
 405:armwave.c     ****     int w, x;
 3406              		.loc 1 405 5 view .LVU964
 406:armwave.c     **** 
 407:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
 3407              		.loc 1 407 5 view .LVU965
 3408              	@ armwave.c:401: {
 401:armwave.c     ****     uint8_t v;
 3409              		.loc 1 401 1 is_stmt 0 view .LVU966
 3410 0f18 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 3411              		.cfi_def_cfa_offset 28
 3412              		.cfi_offset 4, -28
 3413              		.cfi_offset 5, -24
 3414              		.cfi_offset 6, -20
 3415              		.cfi_offset 7, -16
 3416              		.cfi_offset 8, -12
 3417              		.cfi_offset 9, -8
 3418              		.cfi_offset 14, -4
 3419 0f1c 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3420              		.cfi_def_cfa_offset 68
 3421              		.cfi_offset 80, -68
 3422              		.cfi_offset 81, -64
 3423              		.cfi_offset 82, -60
 3424              		.cfi_offset 83, -56
 3425              		.cfi_offset 84, -52
 3426              		.cfi_offset 85, -48
 3427              		.cfi_offset 86, -44
 3428              		.cfi_offset 87, -40
 3429              		.cfi_offset 88, -36
 3430              		.cfi_offset 89, -32
 3431              	@ armwave.c:404:     float level = 0.8f, new_level = 0.8f;
 404:armwave.c     ****     int w, x;
 3432              		.loc 1 404 11 view .LVU967
 3433 0f20 438ADFED 		vldr.32	s17, .L245	@ level,
 3434 0f24 2C819FE5 		ldr	r8, .L245+36	@ _62,
 3435              	@ armwave.c:401: {
 401:armwave.c     ****     uint8_t v;
 3436              		.loc 1 401 1 view .LVU968
 3437 0f28 40AAB0EE 		vmov.f32	s20, s0	@ noise_fraction, noise_fraction
 3438 0f2c 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.157, _62,
 3439              	@ armwave.c:422:                 new_level = 0.8f;
 408:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 409:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 410:armwave.c     ****             noise *= noise;
 411:armwave.c     ****             noise *= noise;
 412:armwave.c     ****             noise *= noise;
 413:armwave.c     **** 
 414:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 415:armwave.c     ****                 noise = -noise;
 416:armwave.c     **** 
 417:armwave.c     ****             //noise += 1.0f;
 418:armwave.c     **** 
 419:armwave.c     ****             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 420:armwave.c     ****                 new_level = 0.2f;
 421:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 422:armwave.c     ****                 new_level = 0.8f;
 3440              		.loc 1 422 27 view .LVU969
 3441 0f30 68BAF0EE 		vmov.f32	s23, s17	@ new_level, level
 3442              	@ armwave.c:419:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 419:armwave.c     ****                 new_level = 0.2f;
 3443              		.loc 1 419 15 view .LVU970
 3444 0f34 3F9ADFED 		vldr.32	s19, .L245+4	@ tmp144,
 3445              	@ armwave.c:424:                 new_level = 0.2f;
 423:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 424:armwave.c     ****                 new_level = 0.2f;
 3446              		.loc 1 424 27 view .LVU971
 3447 0f38 3FAADFED 		vldr.32	s21, .L245+8	@ new_level,
 3448              	@ armwave.c:421:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 421:armwave.c     ****                 new_level = 0.8f;
 3449              		.loc 1 421 22 view .LVU972
 3450 0f3c 3FBA9FED 		vldr.32	s22, .L245+12	@ tmp161,
 3451 0f40 0F6086E2 		add	r6, r6, #15	@ ivtmp.157, ivtmp.157,
 3452              	@ armwave.c:401: {
 401:armwave.c     ****     uint8_t v;
 3453              		.loc 1 401 1 view .LVU973
 3454 0f44 0CD04DE2 		sub	sp, sp, #12	@,,
 3455              		.cfi_def_cfa_offset 80
 3456 0f48 008068E2 		rsb	r8, r8, #0	@ ivtmp.160, _62
 3457 0f4c 029886E2 		add	r9, r6, #131072	@ _68,,
 3458              	.LVL263:
 3459              	.L223:
 3460              	@ armwave.c:423:             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 423:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 3461              		.loc 1 423 22 view .LVU974
 3462 0f50 3BCA9FED 		vldr.32	s24, .L245+16	@ tmp163,
 3463              	@ armwave.c:429:             level = ((level * 3) + new_level) * 0.25f;
 425:armwave.c     ****             } else {
 426:armwave.c     ****                 new_level = 0.8f;
 427:armwave.c     ****             }
 428:armwave.c     **** 
 429:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 3464              		.loc 1 429 29 view .LVU975
 3465 0f54 3B9A9FED 		vldr.32	s18, .L245+20	@ tmp148,
 3466 0f58 025B46E2 		sub	r5, r6, #2048	@ ivtmp.150, ivtmp.157,
 3467 0f5c 017088E2 		add	r7, r8, #1	@ tmp157, ivtmp.160,
 3468              	.LVL264:
 3469              	.L229:
 3470              	@ armwave.c:409:             noise  = ((rand() & 0xffff) * noise_fraction);
 409:armwave.c     ****             noise *= noise;
 3471              		.loc 1 409 24 view .LVU976
 3472 0f60 FEFFFFEB 		bl	rand		@
 3473              	.LVL265:
 3474 0f64 054087E0 		add	r4, r7, r5	@ _58, tmp157, ivtmp.150
 3475              	.LVL266:
 409:armwave.c     ****             noise *= noise;
 3476              		.loc 1 409 13 is_stmt 1 view .LVU977
 3477              	@ armwave.c:409:             noise  = ((rand() & 0xffff) * noise_fraction);
 409:armwave.c     ****             noise *= noise;
 3478              		.loc 1 409 31 is_stmt 0 view .LVU978
 3479 0f68 7000FFE6 		uxth	r0, r0	@ tmp140,
 3480              	@ armwave.c:409:             noise  = ((rand() & 0xffff) * noise_fraction);
 409:armwave.c     ****             noise *= noise;
 3481              		.loc 1 409 41 view .LVU979
 3482 0f6c 900A07EE 		vmov	s15, r0	@ int	@ tmp140, tmp140
 3483 0f70 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp142, tmp140
 3484              	@ armwave.c:409:             noise  = ((rand() & 0xffff) * noise_fraction);
 409:armwave.c     ****             noise *= noise;
 3485              		.loc 1 409 20 view .LVU980
 3486 0f74 8A7A67EE 		vmul.f32	s15, s15, s20	@ noise, tmp142, noise_fraction
 3487              	.LVL267:
 410:armwave.c     ****             noise *= noise;
 3488              		.loc 1 410 13 is_stmt 1 view .LVU981
 3489              	@ armwave.c:410:             noise *= noise;
 410:armwave.c     ****             noise *= noise;
 3490              		.loc 1 410 19 is_stmt 0 view .LVU982
 3491 0f78 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3492              	.LVL268:
 411:armwave.c     ****             noise *= noise;
 3493              		.loc 1 411 13 is_stmt 1 view .LVU983
 3494              	@ armwave.c:411:             noise *= noise;
 411:armwave.c     ****             noise *= noise;
 3495              		.loc 1 411 19 is_stmt 0 view .LVU984
 3496 0f7c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3497              	.LVL269:
 412:armwave.c     **** 
 3498              		.loc 1 412 13 is_stmt 1 view .LVU985
 3499              	@ armwave.c:412:             noise *= noise;
 412:armwave.c     **** 
 3500              		.loc 1 412 19 is_stmt 0 view .LVU986
 3501 0f80 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 3502              	.LVL270:
 414:armwave.c     ****                 noise = -noise;
 3503              		.loc 1 414 13 is_stmt 1 view .LVU987
 3504              	@ armwave.c:414:             if((rand() & 0xff) > 0x7f)
 414:armwave.c     ****                 noise = -noise;
 3505              		.loc 1 414 17 is_stmt 0 view .LVU988
 3506 0f84 FEFFFFEB 		bl	rand		@
 3507              	.LVL271:
 3508              	@ armwave.c:419:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 419:armwave.c     ****                 new_level = 0.2f;
 3509              		.loc 1 419 18 view .LVU989
 3510 0f88 904A07EE 		vmov	s15, r4	@ int	@ _58, _58
 3511 0f8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _6, _58
 3512              	@ armwave.c:419:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 419:armwave.c     ****                 new_level = 0.2f;
 3513              		.loc 1 419 15 view .LVU990
 3514 0f90 E97AF4EE 		vcmpe.f32	s15, s19	@ _6, tmp144
 3515              	@ armwave.c:414:             if((rand() & 0xff) > 0x7f)
 414:armwave.c     ****                 noise = -noise;
 3516              		.loc 1 414 15 view .LVU991
 3517 0f94 800010E3 		tst	r0, #128	@,
 415:armwave.c     **** 
 3518              		.loc 1 415 17 is_stmt 1 view .LVU992
 3519              	@ armwave.c:415:                 noise = -noise;
 415:armwave.c     **** 
 3520              		.loc 1 415 23 is_stmt 0 view .LVU993
 3521 0f98 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 3522              	.LVL272:
 419:armwave.c     ****                 new_level = 0.2f;
 3523              		.loc 1 419 13 is_stmt 1 view .LVU994
 3524              	@ armwave.c:419:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 419:armwave.c     ****                 new_level = 0.2f;
 3525              		.loc 1 419 15 is_stmt 0 view .LVU995
 3526 0f9c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3527              	@ armwave.c:424:                 new_level = 0.2f;
 424:armwave.c     ****             } else {
 3528              		.loc 1 424 27 view .LVU996
 3529 0fa0 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 3530              	@ armwave.c:419:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 419:armwave.c     ****                 new_level = 0.2f;
 3531              		.loc 1 419 15 view .LVU997
 3532 0fa4 070000CA 		bgt	.L225		@,
 421:armwave.c     ****                 new_level = 0.8f;
 3533              		.loc 1 421 20 is_stmt 1 view .LVU998
 3534              	@ armwave.c:421:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 421:armwave.c     ****                 new_level = 0.8f;
 3535              		.loc 1 421 22 is_stmt 0 view .LVU999
 3536 0fa8 CB7AF4EE 		vcmpe.f32	s15, s22	@ _6, tmp161
 3537 0fac 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3538              	@ armwave.c:422:                 new_level = 0.8f;
 422:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 3539              		.loc 1 422 27 view .LVU1000
 3540 0fb0 6B7AF0CE 		vmovgt.f32	s15, s23	@ new_level, new_level
 3541              	@ armwave.c:421:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 421:armwave.c     ****                 new_level = 0.8f;
 3542              		.loc 1 421 22 view .LVU1001
 3543 0fb4 030000CA 		bgt	.L225		@,
 423:armwave.c     ****                 new_level = 0.2f;
 3544              		.loc 1 423 20 is_stmt 1 view .LVU1002
 3545              	@ armwave.c:422:                 new_level = 0.8f;
 422:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 3546              		.loc 1 422 27 is_stmt 0 view .LVU1003
 3547 0fb8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _6, tmp163
 3548 0fbc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3549 0fc0 6B7AF0DE 		vmovle.f32	s15, s23	@, new_level, new_level
 3550 0fc4 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 3551              	.L225:
 3552              	.LVL273:
 3553              		.loc 1 429 13 is_stmt 1 view .LVU1004
 3554              	@ armwave.c:429:             level = ((level * 3) + new_level) * 0.25f;
 3555              		.loc 1 429 34 is_stmt 0 view .LVU1005
 3556 0fc8 897A48EE 		vmla.f32	s15, s17, s18	@ _9, level, tmp148
 3557              	.LVL274:
 3558              	@ armwave.c:429:             level = ((level * 3) + new_level) * 0.25f;
 3559              		.loc 1 429 19 view .LVU1006
 3560 0fcc 1E8ADFED 		vldr.32	s17, .L245+24	@ tmp149,
 3561              	.LVL275:
 3562              		.loc 1 429 19 view .LVU1007
 3563 0fd0 A88A67EE 		vmul.f32	s17, s15, s17	@ level, _9, tmp149
 3564              	.LVL276:
 430:armwave.c     **** 
 431:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3565              		.loc 1 431 13 is_stmt 1 view .LVU1008
 3566              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3567              		.loc 1 431 27 is_stmt 0 view .LVU1009
 3568 0fd4 287A78EE 		vadd.f32	s15, s16, s17	@ _10, noise, level
 3569 0fd8 C07AF5EE 		vcmpe.f32	s15, #0	@ _10
 3570 0fdc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3571              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3572              		.loc 1 431 17 view .LVU1010
 3573 0fe0 0030A0D3 		movle	r3, #0	@ iftmp.21_20,
 3574              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3575              		.loc 1 431 27 view .LVU1011
 3576 0fe4 080000DA 		ble	.L226		@,
 3577              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3578              		.loc 1 431 17 discriminator 1 view .LVU1012
 3579 0fe8 187A9FED 		vldr.32	s14, .L245+28	@ tmp151,
 3580 0fec C77AF4EE 		vcmpe.f32	s15, s14	@ _10, tmp151
 3581 0ff0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3582              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3583              		.loc 1 431 60 discriminator 1 view .LVU1013
 3584 0ff4 167A9F4D 		vldrmi.32	s14, .L245+32	@ tmp153,
 3585              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3586              		.loc 1 431 17 discriminator 1 view .LVU1014
 3587 0ff8 FF30A053 		movpl	r3, #255	@ iftmp.21_20,
 3588              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3589              		.loc 1 431 60 discriminator 1 view .LVU1015
 3590 0ffc 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp152, _10, tmp153
 3591              	@ armwave.c:431:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3592              		.loc 1 431 17 discriminator 1 view .LVU1016
 3593 1000 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp155, tmp152
 3594 1004 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp155, %sfp
 3595 1008 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.21_20, %sfp
 3596              	.L226:
 3597              	.LVL277:
 432:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = v;
 3598              		.loc 1 432 13 is_stmt 1 discriminator 12 view .LVU1017
 3599              	@ armwave.c:432:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = v;
 3600              		.loc 1 432 56 is_stmt 0 discriminator 12 view .LVU1018
 3601 100c 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.21_20, MEM[base: _43, offset: 0B]
 3602              	.LVL278:
 3603              	@ armwave.c:408:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 408:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3604              		.loc 1 408 9 discriminator 12 view .LVU1019
 3605 1010 060055E1 		cmp	r5, r6	@ ivtmp.150, ivtmp.157
 3606 1014 D1FFFF1A 		bne	.L229		@,
 408:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3607              		.loc 1 408 9 discriminator 12 view .LVU1020
 3608 1018 026B85E2 		add	r6, r5, #2048	@ ivtmp.157, ivtmp.150,
 3609              	.LVL279:
 3610              	@ armwave.c:407:     for(w = 0; w < TEST_NWAVES; w++) {
 407:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 3611              		.loc 1 407 5 discriminator 2 view .LVU1021
 3612 101c 090056E1 		cmp	r6, r9	@ ivtmp.157, _68
 3613 1020 028B48E2 		sub	r8, r8, #2048	@ ivtmp.160, ivtmp.160,
 3614 1024 C9FFFF1A 		bne	.L223		@,
 3615              	@ armwave.c:435: }
 433:armwave.c     ****         }
 434:armwave.c     ****     }
 435:armwave.c     **** }
 3616              		.loc 1 435 1 view .LVU1022
 3617 1028 0CD08DE2 		add	sp, sp, #12	@,,
 3618              		.cfi_def_cfa_offset 68
 3619              		@ sp needed	@
 3620 102c 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 3621              		.cfi_restore 88
 3622              		.cfi_restore 89
 3623              		.cfi_restore 86
 3624              		.cfi_restore 87
 3625              		.cfi_restore 84
 3626              		.cfi_restore 85
 3627              		.cfi_restore 82
 3628              		.cfi_restore 83
 3629              		.cfi_restore 80
 3630              		.cfi_restore 81
 3631              		.cfi_def_cfa_offset 28
 3632              	.LVL280:
 3633              		.loc 1 435 1 view .LVU1023
 3634 1030 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 3635              	.L246:
 3636              		.loc 1 435 1 view .LVU1024
 3637              		.align	2
 3638              	.L245:
 3639 1034 CDCC4C3F 		.word	1061997773
 3640 1038 0000C044 		.word	1153433600
 3641 103c CDCC4C3E 		.word	1045220557
 3642 1040 00008044 		.word	1149239296
 3643 1044 00000044 		.word	1140850688
 3644 1048 00004040 		.word	1077936128
 3645 104c 0000803E 		.word	1048576000
 3646 1050 0000803F 		.word	1065353216
 3647 1054 00007F43 		.word	1132396544
 3648 1058 00000000 		.word	test_wave_buffer
 3649              		.cfi_endproc
 3650              	.LFE71:
 3652              		.align	2
 3653              		.global	armwave_cleanup
 3654              		.syntax unified
 3655              		.arm
 3656              		.fpu vfp
 3658              	armwave_cleanup:
 3659              	.LFB72:
 436:armwave.c     **** 
 437:armwave.c     **** void armwave_cleanup()
 438:armwave.c     **** {
 3660              		.loc 1 438 1 is_stmt 1 view -0
 3661              		.cfi_startproc
 3662              		@ args = 0, pretend = 0, frame = 0
 3663              		@ frame_needed = 0, uses_anonymous_args = 0
 439:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3664              		.loc 1 439 5 view .LVU1026
 3665              	@ armwave.c:438: {
 438:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3666              		.loc 1 438 1 is_stmt 0 view .LVU1027
 3667 105c 10402DE9 		push	{r4, lr}	@
 3668              		.cfi_def_cfa_offset 8
 3669              		.cfi_offset 4, -8
 3670              		.cfi_offset 14, -4
 3671              	@ armwave.c:439:     free(g_armwave_state.out_pixbuf);
 3672              		.loc 1 439 25 view .LVU1028
 3673 1060 28409FE5 		ldr	r4, .L249	@ tmp113,
 3674              	@ armwave.c:439:     free(g_armwave_state.out_pixbuf);
 3675              		.loc 1 439 5 view .LVU1029
 3676 1064 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3677 1068 FEFFFFEB 		bl	free		@
 3678              	.LVL281:
 440:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3679              		.loc 1 440 5 is_stmt 1 view .LVU1030
 3680 106c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3681 1070 FEFFFFEB 		bl	free		@
 3682              	.LVL282:
 441:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3683              		.loc 1 441 5 view .LVU1031
 3684 1074 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.xcoord_to_xpixel
 3685 1078 FEFFFFEB 		bl	free		@
 3686              	.LVL283:
 442:armwave.c     **** 
 443:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3687              		.loc 1 443 5 view .LVU1032
 3688              	@ armwave.c:443:     g_armwave_state.out_pixbuf = NULL;
 3689              		.loc 1 443 32 is_stmt 0 view .LVU1033
 3690 107c 0030A0E3 		mov	r3, #0	@ tmp120,
 3691 1080 4C3084E5 		str	r3, [r4, #76]	@ tmp120, g_armwave_state.out_pixbuf
 444:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3692              		.loc 1 444 5 is_stmt 1 view .LVU1034
 3693              	@ armwave.c:444:     g_armwave_state.ch1_buffer = NULL;
 3694              		.loc 1 444 32 is_stmt 0 view .LVU1035
 3695 1084 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 445:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3696              		.loc 1 445 5 is_stmt 1 view .LVU1036
 3697              	@ armwave.c:445:     g_armwave_state.xcoord_to_xpixel = NULL;
 3698              		.loc 1 445 38 is_stmt 0 view .LVU1037
 3699 1088 683084E5 		str	r3, [r4, #104]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3700              	@ armwave.c:446: }
 446:armwave.c     **** }
 3701              		.loc 1 446 1 view .LVU1038
 3702 108c 1080BDE8 		pop	{r4, pc}	@
 3703              	.L250:
 3704              		.align	2
 3705              	.L249:
 3706 1090 00000000 		.word	g_armwave_state
 3707              		.cfi_endproc
 3708              	.LFE72:
 3710              		.section	.text.startup,"ax",%progbits
 3711              		.align	2
 3712              		.global	main
 3713              		.syntax unified
 3714              		.arm
 3715              		.fpu vfp
 3717              	main:
 3718              	.LVL284:
 3719              	.LFB73:
 447:armwave.c     **** 
 448:armwave.c     **** int main(int argc, char *argv[])
 449:armwave.c     **** {
 3720              		.loc 1 449 1 is_stmt 1 view -0
 3721              		.cfi_startproc
 3722              		@ args = 0, pretend = 0, frame = 8
 3723              		@ frame_needed = 0, uses_anonymous_args = 0
 450:armwave.c     ****     uint32_t *out_buffer;
 3724              		.loc 1 450 5 view .LVU1040
 451:armwave.c     ****     uint32_t xx, yy, n;
 3725              		.loc 1 451 5 view .LVU1041
 452:armwave.c     **** 
 453:armwave.c     ****     //printf("Starting armwave...\n");
 454:armwave.c     ****     armwave_init();
 3726              		.loc 1 454 5 view .LVU1042
 3727              	.LBB37:
 3728              	.LBI37:
  93:armwave.c     **** {
 3729              		.loc 1 93 6 view .LVU1043
 3730              	.LBB38:
  95:armwave.c     **** }
 3731              		.loc 1 95 5 view .LVU1044
 3732              	.LBE38:
 3733              	.LBE37:
 3734              	@ armwave.c:449: {
 449:armwave.c     ****     uint32_t *out_buffer;
 3735              		.loc 1 449 1 is_stmt 0 view .LVU1045
 3736 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3737              		.cfi_def_cfa_offset 36
 3738              		.cfi_offset 4, -36
 3739              		.cfi_offset 5, -32
 3740              		.cfi_offset 6, -28
 3741              		.cfi_offset 7, -24
 3742              		.cfi_offset 8, -20
 3743              		.cfi_offset 9, -16
 3744              		.cfi_offset 10, -12
 3745              		.cfi_offset 11, -8
 3746              		.cfi_offset 14, -4
 3747              	.LBB41:
 3748              	.LBB39:
 3749              	@ armwave.c:95:     g_armwave_state.flags = 0;
  95:armwave.c     **** }
 3750              		.loc 1 95 27 view .LVU1046
 3751 0004 0030A0E3 		mov	r3, #0	@ tmp190,
 3752 0008 54419FE5 		ldr	r4, .L271+8	@ tmp255,
 3753              	.LBE39:
 3754              	.LBE41:
 3755              	@ armwave.c:449: {
 449:armwave.c     ****     uint32_t *out_buffer;
 3756              		.loc 1 449 1 view .LVU1047
 3757 000c 0CD04DE2 		sub	sp, sp, #12	@,,
 3758              		.cfi_def_cfa_offset 48
 3759              	@ armwave.c:457:     armwave_test_create_am_sine(0.5f, 1e-6f);
 455:armwave.c     **** 
 456:armwave.c     ****     //printf("Creating test waveform...\n");
 457:armwave.c     ****     armwave_test_create_am_sine(0.5f, 1e-6f);
 3760              		.loc 1 457 5 view .LVU1048
 3761 0010 510ADFED 		vldr.32	s1, .L271	@,
 3762 0014 510A9FED 		vldr.32	s0, .L271+4	@,
 3763              	.LBB42:
 3764              	.LBB40:
 3765              	@ armwave.c:95:     g_armwave_state.flags = 0;
  95:armwave.c     **** }
 3766              		.loc 1 95 27 view .LVU1049
 3767 0018 003084E5 		str	r3, [r4]	@ tmp190, g_armwave_state.flags
 3768              	.LBE40:
 3769              	.LBE42:
 3770              		.loc 1 457 5 is_stmt 1 view .LVU1050
 3771 001c FEFFFFEB 		bl	armwave_test_create_am_sine		@
 3772              	.LVL285:
 458:armwave.c     **** 
 459:armwave.c     ****     //printf("Creating gamma LUT...\n");
 460:armwave.c     ****     test_create_gamma();
 3773              		.loc 1 460 5 view .LVU1051
 3774 0020 FEFFFFEB 		bl	test_create_gamma		@
 3775              	.LVL286:
 461:armwave.c     **** 
 462:armwave.c     ****     //printf("Setting up render...\n");
 463:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3776              		.loc 1 463 5 view .LVU1052
 3777 0024 011CA0E3 		mov	r1, #256	@,
 3778 0028 020BA0E3 		mov	r0, #2048	@,
 3779 002c FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3780              	.LVL287:
 464:armwave.c     **** 
 465:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 466:armwave.c     **** 
 467:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3781              		.loc 1 467 5 view .LVU1053
 3782              		.loc 1 467 5 is_stmt 0 view .LVU1054
 3783 0030 2C6094E5 		ldr	r6, [r4, #44]	@ _119, g_armwave_state.slice_height
 3784              	@ armwave.c:463:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 463:armwave.c     **** 
 3785              		.loc 1 463 5 view .LVU1055
 3786 0034 2C319FE5 		ldr	r3, .L271+12	@ ivtmp_197,
 3787 0038 04308DE5 		str	r3, [sp, #4]	@ ivtmp_197, %sfp
 3788              	.LVL288:
 3789              	.L252:
 3790              	@ armwave.c:468:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 468:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3791              		.loc 1 468 9 view .LVU1056
 3792 003c 020B56E3 		cmp	r6, #2048	@ _119,
 3793              	@ armwave.c:468:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3794              		.loc 1 468 16 view .LVU1057
 3795 0040 0050A093 		movls	r5, #0	@ yy,
 3796 0044 24A09495 		ldrls	r10, [r4, #36]	@ prephitmp_184, g_armwave_state.waves
 3797              	@ armwave.c:468:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3798              		.loc 1 468 9 view .LVU1058
 3799 0048 3C00008A 		bhi	.L260		@,
 3800              	.LVL289:
 3801              	.L257:
 469:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 470:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3802              		.loc 1 470 13 is_stmt 1 discriminator 3 view .LVU1059
 3803 004c 960502E0 		mul	r2, r6, r5	@ _1, _119, yy
 3804              	.LBB43:
 3805              	.LBB44:
 3806              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 3807              		.loc 1 71 63 is_stmt 0 discriminator 3 view .LVU1060
 3808 0050 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3809              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3810              		.loc 1 74 5 discriminator 3 view .LVU1061
 3811 0054 00005AE3 		cmp	r10, #0	@ prephitmp_184,
 3812              	.LBE44:
 3813              	.LBE43:
 3814              	@ armwave.c:470:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 3815              		.loc 1 470 13 discriminator 3 view .LVU1062
 3816 0058 307094E5 		ldr	r7, [r4, #48]	@ _2, g_armwave_state.slice_record_height
 3817              	.LVL290:
 3818              	.LBB46:
 3819              	.LBI43:
  63:armwave.c     **** {
 3820              		.loc 1 63 6 is_stmt 1 discriminator 3 view .LVU1063
 3821              	.LBB45:
  65:armwave.c     ****     uint32_t value, word;
 3822              		.loc 1 65 5 discriminator 3 view .LVU1064
  66:armwave.c     ****     uint8_t *wave_base;
 3823              		.loc 1 66 5 discriminator 3 view .LVU1065
  67:armwave.c     ****     uint8_t *write_buffer_base;
 3824              		.loc 1 67 5 discriminator 3 view .LVU1066
  68:armwave.c     ****     uint8_t *write_buffer;
 3825              		.loc 1 68 5 discriminator 3 view .LVU1067
  69:armwave.c     ****     
 3826              		.loc 1 69 5 discriminator 3 view .LVU1068
  71:armwave.c     **** 
 3827              		.loc 1 71 5 discriminator 3 view .LVU1069
 3828              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 3829              		.loc 1 71 63 is_stmt 0 discriminator 3 view .LVU1070
 3830 005c 900200E0 		mul	r0, r0, r2	@ _19, g_armwave_state.bitdepth_height, _1
 3831              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  71:armwave.c     **** 
 3832              		.loc 1 71 40 discriminator 3 view .LVU1071
 3833 0060 043094E5 		ldr	r3, [r4, #4]	@ _17, g_armwave_state.ch1_buffer
 3834              	.LVL291:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3835              		.loc 1 74 5 is_stmt 1 discriminator 3 view .LVU1072
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3836              		.loc 1 74 5 is_stmt 0 discriminator 3 view .LVU1073
 3837 0064 2F00000A 		beq	.L253		@,
 3838 0068 046042E2 		sub	r6, r2, #4	@ _80, _1,
 3839              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3840              		.loc 1 74 11 view .LVU1074
 3841 006c 00E0A0E3 		mov	lr, #0	@ w,
 3842              	.LVL292:
 3843              	.L256:
  75:armwave.c     **** 
 3844              		.loc 1 75 9 is_stmt 1 view .LVU1075
 3845              	@ armwave.c:75:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  75:armwave.c     **** 
 3846              		.loc 1 75 64 is_stmt 0 view .LVU1076
 3847 0070 202094E5 		ldr	r2, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3848              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3849              		.loc 1 79 9 view .LVU1077
 3850 0074 000057E3 		cmp	r7, #0	@ _2,
 3851              	@ armwave.c:75:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  75:armwave.c     **** 
 3852              		.loc 1 75 36 view .LVU1078
 3853 0078 14C094E5 		ldr	ip, [r4, #20]	@ _20, g_armwave_state.wave_buffer
 3854              	@ armwave.c:75:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  75:armwave.c     **** 
 3855              		.loc 1 75 64 view .LVU1079
 3856 007c 920E02E0 		mul	r2, r2, lr	@ _23, g_armwave_state.wave_stride, w
 3857              	.LVL293:
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3858              		.loc 1 79 9 is_stmt 1 view .LVU1080
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3859              		.loc 1 79 9 is_stmt 0 view .LVU1081
 3860 0080 2400000A 		beq	.L254		@,
 3861 0084 062082E0 		add	r2, r2, r6	@ tmp202, _23, _80
 3862              	.LVL294:
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3863              		.loc 1 79 9 view .LVU1082
 3864 0088 02C08CE0 		add	ip, ip, r2	@ ivtmp.166, _20, tmp202
 3865              	.LVL295:
 3866              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3867              		.loc 1 79 16 view .LVU1083
 3868 008c 0020A0E3 		mov	r2, #0	@ yy,
 3869              	.LVL296:
 3870              	.L255:
  80:armwave.c     **** 
 3871              		.loc 1 80 13 is_stmt 1 view .LVU1084
 3872              	@ armwave.c:80:             word = *(uint32_t*)(wave_base + yy);
  80:armwave.c     **** 
 3873              		.loc 1 80 18 is_stmt 0 view .LVU1085
 3874 0090 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _183, offset: 0B]
 3875              	.LVL297:
  82:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 3876              		.loc 1 82 13 is_stmt 1 view .LVU1086
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3877              		.loc 1 84 17 view .LVU1087
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3878              		.loc 1 85 17 view .LVU1088
  86:armwave.c     ****                 word >>= 8;
 3879              		.loc 1 86 17 view .LVU1089
 3880              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3881              		.loc 1 85 63 is_stmt 0 view .LVU1090
 3882 0094 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3883 0098 01B082E2 		add	fp, r2, #1	@ tmp214, yy,
 3884              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 3885              		.loc 1 86 47 view .LVU1091
 3886 009c 7180E0E6 		uxtab	r8, r0, r1	@ tmp207, _19, word
 3887 00a0 998229E0 		mla	r9, r9, r2, r8	@ tmp208, g_armwave_state.bitdepth_height, yy, tmp207
 3888              	@ armwave.c:87:                 word >>= 8;
  87:armwave.c     ****             }
 3889              		.loc 1 87 22 view .LVU1092
 3890 00a4 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 3891              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 3892              		.loc 1 86 47 view .LVU1093
 3893 00a8 0980D3E7 		ldrb	r8, [r3, r9]	@ zero_extendqisi2	@ *_67, *_67
 3894 00ac 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp219, _19, word
 3895 00b0 018088E2 		add	r8, r8, #1	@ tmp211, *_67,
 3896 00b4 0980C3E7 		strb	r8, [r3, r9]	@ tmp211, *_67
 3897              	.LVL298:
  87:armwave.c     ****             }
 3898              		.loc 1 87 17 is_stmt 1 view .LVU1094
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3899              		.loc 1 84 17 view .LVU1095
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3900              		.loc 1 85 17 view .LVU1096
  86:armwave.c     ****                 word >>= 8;
 3901              		.loc 1 86 17 view .LVU1097
 3902              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3903              		.loc 1 85 63 is_stmt 0 view .LVU1098
 3904 00b8 288094E5 		ldr	r8, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3905              	@ armwave.c:87:                 word >>= 8;
  87:armwave.c     ****             }
 3906              		.loc 1 87 22 view .LVU1099
 3907 00bc 2198A0E1 		lsr	r9, r1, #16	@ word, word,
 3908              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 3909              		.loc 1 86 47 view .LVU1100
 3910 00c0 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp242, _19, word,
 3911              	.LVL299:
  86:armwave.c     ****                 word >>= 8;
 3912              		.loc 1 86 47 view .LVU1101
 3913 00c4 98AB28E0 		mla	r8, r8, fp, r10	@ tmp220, g_armwave_state.bitdepth_height, tmp214, tmp219
 3914 00c8 79A0E0E6 		uxtab	r10, r0, r9	@ tmp227, _19, word
 3915 00cc 08B0D3E7 		ldrb	fp, [r3, r8]	@ zero_extendqisi2	@ *_87, *_87
 3916              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3917              		.loc 1 85 63 view .LVU1102
 3918 00d0 029082E2 		add	r9, r2, #2	@ tmp229, yy,
 3919              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 3920              		.loc 1 86 47 view .LVU1103
 3921 00d4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_87,
 3922 00d8 08B0C3E7 		strb	fp, [r3, r8]	@ tmp223, *_87
 3923              	.LVL300:
  87:armwave.c     ****             }
 3924              		.loc 1 87 17 is_stmt 1 view .LVU1104
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3925              		.loc 1 84 17 view .LVU1105
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3926              		.loc 1 85 17 view .LVU1106
  86:armwave.c     ****                 word >>= 8;
 3927              		.loc 1 86 17 view .LVU1107
 3928              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3929              		.loc 1 85 63 is_stmt 0 view .LVU1108
 3930 00dc 28B094E5 		ldr	fp, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3931 00e0 038082E2 		add	r8, r2, #3	@ tmp238, yy,
 3932              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3933              		.loc 1 79 37 view .LVU1109
 3934 00e4 042082E2 		add	r2, r2, #4	@ yy, yy,
 3935              	.LVL301:
 3936              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 3937              		.loc 1 86 47 view .LVU1110
 3938 00e8 9BA929E0 		mla	r9, fp, r9, r10	@ tmp232, g_armwave_state.bitdepth_height, tmp229, tmp227
 3939              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3940              		.loc 1 79 9 view .LVU1111
 3941 00ec 020057E1 		cmp	r7, r2	@ _2, yy
 3942              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 3943              		.loc 1 86 47 view .LVU1112
 3944 00f0 09A0D3E7 		ldrb	r10, [r3, r9]	@ zero_extendqisi2	@ *_107, *_107
 3945 00f4 01A08AE2 		add	r10, r10, #1	@ tmp235, *_107,
 3946 00f8 09A0C3E7 		strb	r10, [r3, r9]	@ tmp235, *_107
 3947              	.LVL302:
  87:armwave.c     ****             }
 3948              		.loc 1 87 17 is_stmt 1 view .LVU1113
  84:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3949              		.loc 1 84 17 view .LVU1114
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3950              		.loc 1 85 17 view .LVU1115
  86:armwave.c     ****                 word >>= 8;
 3951              		.loc 1 86 17 view .LVU1116
 3952              	@ armwave.c:85:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  85:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3953              		.loc 1 85 63 is_stmt 0 view .LVU1117
 3954 00fc 289094E5 		ldr	r9, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3955              	@ armwave.c:86:                 *(write_buffer + scale_value) += 1;
  86:armwave.c     ****                 word >>= 8;
 3956              		.loc 1 86 47 view .LVU1118
 3957 0100 991821E0 		mla	r1, r9, r8, r1	@ tmp243, g_armwave_state.bitdepth_height, tmp238, tmp242
 3958 0104 0180D3E7 		ldrb	r8, [r3, r1]	@ zero_extendqisi2	@ *_127, *_127
 3959 0108 018088E2 		add	r8, r8, #1	@ tmp246, *_127,
 3960 010c 0180C3E7 		strb	r8, [r3, r1]	@ tmp246, *_127
  87:armwave.c     ****             }
 3961              		.loc 1 87 17 is_stmt 1 view .LVU1119
 3962              	.LVL303:
 3963              	@ armwave.c:79:         for(yy = 0; yy < height; yy += 4) {
  79:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3964              		.loc 1 79 9 is_stmt 0 view .LVU1120
 3965 0110 DEFFFF8A 		bhi	.L255		@,
 3966 0114 24A094E5 		ldr	r10, [r4, #36]	@ prephitmp_184, g_armwave_state.waves
 3967              	.LVL304:
 3968              	.L254:
 3969              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3970              		.loc 1 74 44 view .LVU1121
 3971 0118 01E08EE2 		add	lr, lr, #1	@ w, w,
 3972              	.LVL305:
 3973              	@ armwave.c:74:     for(w = 0; w < g_armwave_state.waves; w++) {
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3974              		.loc 1 74 5 view .LVU1122
 3975 011c 0A005EE1 		cmp	lr, r10	@ w, prephitmp_184
 3976 0120 D2FFFF3A 		bcc	.L256		@,
 3977 0124 2C6094E5 		ldr	r6, [r4, #44]	@ _119, g_armwave_state.slice_height
 3978              	.LVL306:
 3979              	.L253:
  74:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3980              		.loc 1 74 5 view .LVU1123
 3981              	.LBE45:
 3982              	.LBE46:
 3983              	@ armwave.c:468:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 468:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3984              		.loc 1 468 32 discriminator 3 view .LVU1124
 3985 0128 0610A0E1 		mov	r1, r6	@, _119
 3986 012c 020BA0E3 		mov	r0, #2048	@,
 3987              	.LVL307:
 468:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3988              		.loc 1 468 32 discriminator 3 view .LVU1125
 3989 0130 FEFFFFEB 		bl	__aeabi_uidiv		@
 3990              	.LVL308:
 3991              	@ armwave.c:468:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 468:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3992              		.loc 1 468 67 discriminator 3 view .LVU1126
 3993 0134 015085E2 		add	r5, r5, #1	@ yy, yy,
 3994              	.LVL309:
 3995              	@ armwave.c:468:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 468:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3996              		.loc 1 468 9 discriminator 3 view .LVU1127
 3997 0138 050050E1 		cmp	r0, r5	@, yy
 3998 013c C2FFFF8A 		bhi	.L257		@,
 3999              	.LVL310:
 4000              	.L260:
 4001              	@ armwave.c:467:     for(n = 0; n < 5000; n++) {
 467:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 4002              		.loc 1 467 5 discriminator 2 view .LVU1128
 4003 0140 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_197, %sfp
 4004 0144 013053E2 		subs	r3, r3, #1	@ ivtmp_197, ivtmp_197,
 4005 0148 04308DE5 		str	r3, [sp, #4]	@ ivtmp_197, %sfp
 4006 014c BAFFFF1A 		bne	.L252		@,
 4007 0150 0300A0E1 		mov	r0, r3	@, ivtmp_197
 471:armwave.c     ****         }
 472:armwave.c     ****     }
 473:armwave.c     **** 
 474:armwave.c     ****     /*
 475:armwave.c     ****     printf("Creating pixbuf\n");
 476:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 477:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 478:armwave.c     **** 
 479:armwave.c     ****     printf("Dumping pixbuf\n");
 480:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 481:armwave.c     ****     */
 482:armwave.c     **** 
 483:armwave.c     ****     return 0;
 4008              		.loc 1 483 5 is_stmt 1 view .LVU1129
 4009              	@ armwave.c:484: }
 484:armwave.c     **** }...
 4010              		.loc 1 484 1 is_stmt 0 view .LVU1130
 4011 0154 0CD08DE2 		add	sp, sp, #12	@,,
 4012              		.cfi_def_cfa_offset 36
 4013              		@ sp needed	@
 4014 0158 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 4015              	.L272:
 4016              		.align	2
 4017              	.L271:
 4018 015c BD378635 		.word	897988541
 4019 0160 0000003F 		.word	1056964608
 4020 0164 00000000 		.word	g_armwave_state
 4021 0168 88130000 		.word	5000
 4022              		.cfi_endproc
 4023              	.LFE73:
 4025              		.comm	gamma_table,256,4
 4026              		.comm	test_wave_buffer,131072,4
 4027              		.comm	g_armwave_state,108,4
 4028              		.section	.rodata
 4029              		.align	2
 4030              		.set	.LANCHOR0,. + 0
 4033              	__PRETTY_FUNCTION__.16995:
 4034 0000 61726D77 		.ascii	"armwave_setup_render\000"
 4034      6176655F 
 4034      73657475 
 4034      705F7265 
 4034      6E646572 
 4035 0015 000000   		.space	3
 4038              	__PRETTY_FUNCTION__.17031:
 4039 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4039      6176655F 
 4039      66696C6C 
 4039      5F706978 
 4039      6275665F 
 4042              	__PRETTY_FUNCTION__.17062:
 4043 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4043      6176655F 
 4043      66696C6C 
 4043      5F706978 
 4043      6275665F 
 4044              		.section	.rodata.str1.4,"aMS",%progbits,1
 4045              		.align	2
 4046              	.LC0:
 4047 0000 61726D77 		.ascii	"armwave.c\000"
 4047      6176652E 
 4047      6300
 4048 000a 0000     		.space	2
 4049              	.LC1:
 4050 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4050      65745F68 
 4050      65696768 
 4050      74203D3D 
 4050      20323536 
 4051 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4051      68656967 
 4051      6874203D 
 4051      3D203130 
 4051      3234207C 
 4052 006b 00       		.space	1
 4053              	.LC2:
 4054 006c 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4054      7566665F 
 4054      73697A65 
 4054      3D25640A 
 4054      00
 4055 007d 000000   		.space	3
 4056              	.LC3:
 4057 0080 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4057      6D776176 
 4057      655F7374 
 4057      6174652E 
 4057      6368315F 
 4058 00a3 00       		.space	1
 4059              	.LC4:
 4060 00a4 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4060      6D776176 
 4060      655F7374 
 4060      6174652E 
 4060      78636F6F 
 4061 00cd 000000   		.space	3
 4062              	.LC5:
 4063 00d0 73746172 		.ascii	"start_point < end_point\000"
 4063      745F706F 
 4063      696E7420 
 4063      3C20656E 
 4063      645F706F 
 4064              	.LC6:
 4065 00e8 6F75745F 		.ascii	"out_buffer != NULL\000"
 4065      62756666 
 4065      65722021 
 4065      3D204E55 
 4065      4C4C00
 4066 00fb 00       		.space	1
 4067              	.LC7:
 4068 00fc 776200   		.ascii	"wb\000"
 4069 00ff 00       		.space	1
 4070              	.LC8:
 4071 0100 50330A00 		.ascii	"P3\012\000"
 4072              	.LC9:
 4073 0104 25642025 		.ascii	"%d %d\012\000"
 4073      640A00
 4074 010b 00       		.space	1
 4075              	.LC10:
 4076 010c 3235350A 		.ascii	"255\012\000"
 4076      00
 4077 0111 000000   		.space	3
 4078              	.LC11:
 4079 0114 25336420 		.ascii	"%3d %3d %3d\012\000"
 4079      25336420 
 4079      2533640A 
 4079      00
 4080 0121 000000   		.space	3
 4081              	.LC12:
 4082 0124 76302E30 		.ascii	"v0.0.1\000"
 4082      2E3100
 4083 012b 00       		.space	1
 4084              	.LC13:
 4085 012c 61726D77 		.ascii	"armwave version: %s\012\000"
 4085      61766520 
 4085      76657273 
 4085      696F6E3A 
 4085      2025730A 
 4086              		.text
 4087              	.Letext0:
 4088              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4089              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4090              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4091              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4092              		.file 6 "/usr/include/stdio.h"
 4093              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4094              		.file 8 "/usr/include/errno.h"
 4095              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4096              		.file 10 "/usr/include/unistd.h"
 4097              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4098              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4099              		.file 13 "/usr/local/include/python3.8/pyport.h"
 4100              		.file 14 "/usr/include/math.h"
 4101              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4102              		.file 16 "/usr/include/time.h"
 4103              		.file 17 "/usr/local/include/python3.8/pymem.h"
 4104              		.file 18 "/usr/local/include/python3.8/object.h"
 4105              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4106              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4107              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4108              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4109              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4110              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4111              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4112              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4113              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4114              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4115              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4116              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4117              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4118              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4119              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4120              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4121              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4122              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4123              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4124              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4125              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4126              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4127              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4128              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4129              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4130              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4131              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4132              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4133              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4134              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4135              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4136              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4137              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4138              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4139              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4140              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4141              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4142              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4143              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4144              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4145              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4146              		.file 60 "/usr/local/include/python3.8/context.h"
 4147              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4148              		.file 62 "/usr/local/include/python3.8/code.h"
 4149              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4150              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4151              		.file 65 "/usr/local/include/python3.8/import.h"
 4152              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4153              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4154              		.file 68 "armwave.h"
 4155              		.file 69 "/usr/include/stdlib.h"
 4156              		.file 70 "/usr/include/assert.h"
 4157              		.file 71 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 4158              		.file 72 "<built-in>"
